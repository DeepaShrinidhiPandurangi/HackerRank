{"username":"Learner_4788","email":"deepagurumathad@gmail.com","school":"VTU","country":"United Kingdom","name":"Deepa Shrinidhi Pandurangi","city":"Ithaca","website":"","short_bio":"I am a software engineering professional with five years of industrial work experience in service and Product based companies and more than two years of academic work experience. \n1+ years experience coding in Python.\nI am currently looking for roles in Python Development / Data Analysis.","job_title":"","phone_number":"6073199615","github_url":"https://github.com/DeepaShrinidhiPandurangi","gh_uid":"57604639","linkedin_url":"https://www.linkedin.com/in/deepa-pandurangi-a6731536/","jobs_consent":"true","personal_first_name":"Deepa Shrinidhi","personal_last_name":"Pandurangi","timezone":"Europe/London","state_id":2,"years_of_experience":0,"is_professional":true,"gender":"Woman","jobs_prefered_roles":["Data Analyst","Testing","DevOps"],"jobs_headline":"Technical Engineer","contest_data":{"attending-gracehopper-2019":"No"},"hackos":614,"favorite_challenges":["Print Function","Hash Tables: Ransom Note","Compress the String! ","The Longest Common Subsequence","Super Reduced String","Caesar Cipher","Diagonal Difference","List Comprehensions","Nested Lists","Mod Divmod","Power - Mod Power"],"challenges_created":[],"other_emails":["deepaspandurangi@gmail.com"],"all_schools":[{"name":"VTU","program":"Electrical Engineering \u0026 Computer Science","degree":"BE"}],"snippets":[],"submissions":[{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    multiple_3 =[]\n    multiple_5 =[]\n    for i in range(1,n):\n        if i%3 == 0:\n            multiple_3.append(i)\n        elif i%5 == 0:\n            multiple_3.append(i)\n    sum=0\n    for i,j in enumerate(multiple_3):\n        sum = sum + j\n    print(sum)\n    \n\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    multiple_3 =[]\n    multiple_5 =[]\n    for i in range(1,n):\n        if i%3 == 0:\n            multiple_3.append(i)\n        elif i%5 == 0:\n            multiple_3.append(i)\n    sum=0\n    for i,j in enumerate(multiple_3):\n        sum = sum + j\n    print(sum)\n    \n\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    multiples =[]\n    for i in range(1,n):\n        if i%3 == 0 or i%5 == 0:\n            multiples.append(i)\n    sum=0\n    for i,j in enumerate(multiples):\n        sum = sum + j\n    print(sum)\n\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    multiples_3 =[]\n    multiples_5 =[]\n    for i in range(1,n):\n        if 3*i \u003c n:\n            multiples_3.append(3*i)\n    for i in range(1,n):\n        if 5*i \u003c n:\n            if 5*i not in multiples_3:\n                multiples_5.append(5*i) \n    multiples = multiples_3+multiples_5            \n    sum=0\n    for i,j in enumerate(multiples):\n        sum = sum + j\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    if q_3 \u003e0:\n        sum_3 = 3*q_3*((q_3 + 1)/2)\n    if q_5 \u003e0:\n        sum_5 = 5*q_5*((q_5 + 1)/2)\n    if q_15 \u003e0:\n        sum_15 = 15*q_15*((q_15 + 1)/2)\n    sum = sum_3+sum_5-sum_15\nprint(int(sum))\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    if q_3 \u003e0:\n        sum_3 = 3*q_3*((q_3 + 1)/2)\n    if q_5 \u003e0:\n        sum_5 = 5*q_5*((q_5 + 1)/2)\n    if q_15 \u003e0:\n        sum_15 = 15*q_15*((q_15 + 1)/2)\nsum = int(sum_3+sum_5-sum_15)\nprint(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    if q_3 \u003e0:\n        sum_3 = 3*q_3*((q_3 + 1)/2)\n    if q_5 \u003e0:\n        sum_5 = 5*q_5*((q_5 + 1)/2)\n\nsum = int(sum_3+sum_5)\nprint(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    if q_3 \u003e0:\n        sum_3 = 3*q_3*((q_3 + 1)/2)\n    if q_5 \u003e0:\n        sum_5 = 5*q_5*((q_5 + 1)/2)\n    if q_15 \u003e0:\n        sum_15 = 15*q_15*((q_15 + 1)/2)\nsum = sum_3+sum_5-sum_15\nprint(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(1,n):\n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*q_3*((q_3 + 1)/2)\n        if q_5 \u003e0:\n            sum_5 = 5*q_5*((q_5 + 1)/2)\n        if q_15 \u003e0:\n            sum_15 = 15*q_15*((q_15 + 1)/2)\n        sum = sum_3+sum_5-sum_15\n    print(int(sum))\n","score":0.4,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(0,t):\n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*q_3*((q_3 + 1)/2)\n        if q_5 \u003e0:\n            sum_5 = 5*q_5*((q_5 + 1)/2)\n        if q_15 \u003e0:\n            sum_15 = 15*q_15*((q_15 + 1)/2)\n        sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(0,t):\n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*q_3*((q_3 + 1)/2)\n        if q_5 \u003e0:\n            sum_5 = 5*q_5*((q_5 + 1)/2)\n        if q_15 \u003e0:\n            sum_15 = 15*q_15*((q_15 + 1)/2)\n        sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(0,t):\n        if (n -1)\u003c3 :\n            sum = 0\n        elif (n-1) == 4:\n            sum=3\n        else:    \n            q_3 = (n-1)//3\n            q_5 = (n-1)//5\n            q_15 = (n-1)//15\n            sum_3=0\n            sum_5=0\n            sum_15=0\n            if q_3 \u003e0:\n                sum_3 = 3*q_3*((q_3 + 1)/2)\n            if q_5 \u003e0:\n                sum_5 = 5*q_5*((q_5 + 1)/2)\n            if q_15 \u003e0:\n                sum_15 = 15*q_15*((q_15 + 1)/2)\n            sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(0,t):\n        if (n -1)\u003c3 :\n            sum = 0\n        elif (n-1) == 4:\n            sum=3\n        else:    \n            q_3 = (n-1)//3\n            q_5 = (n-1)//5\n            q_15 = (n-1)//15\n            sum_3=0\n            sum_5=0\n            sum_15=0\n            if q_3 \u003e0:\n                sum_3 = 3*q_3*((q_3 + 1)/2)\n            if q_5 \u003e0:\n                sum_5 = 5*q_5*((q_5 + 1)/2)\n            if q_15 \u003e0:\n                sum_15 = 15*q_15*((q_15 + 1)/2)\n            sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    for i in range(0,t):\n        if (n -1)\u003c3 :\n            sum = 0\n        elif (n-1) == 4:\n            sum=3\n        else:    \n            q_3 = (n-1)//3\n            q_5 = (n-1)//5\n            q_15 = (n-1)//15\n            sum_3=0\n            sum_5=0\n            sum_15=0\n            if q_3 \u003e0:\n                sum_3 = 3*q_3*((q_3 + 1)/2)\n            if q_5 \u003e0:\n                sum_5 = 5*q_5*((q_5 + 1)/2)\n            if q_15 \u003e0:\n                sum_15 = 15*q_15*((q_15 + 1)/2)\n            sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*q_3*((q_3 + 1)/2)\n        if q_5 \u003e0:\n            sum_5 = 5*q_5*((q_5 + 1)/2)\n        if q_15 \u003e0:\n            sum_15 = 15*q_15*((q_15 + 1)/2)\n        sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        print(q_3)\n        q_5 = (n-1)//5\n        print(q_5)\n        q_15 = (n-1)//15\n        print(q_15)\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = int(3*q_3*((q_3 + 1)/2))\n            print(sum_3)\n        if q_5 \u003e0:\n            sum_5 = int(5*q_5*((q_5 + 1)/2))\n            print(sum_5)\n        if q_15 \u003e0:\n            sum_15 = int(15*q_15*((q_15 + 1)/2))\n            print(sum_15)\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        print(q_3)\n        q_5 = (n-1)//5\n        print(q_5)\n        q_15 = (n-1)//15\n        print(q_15)\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = int(3*q_3*((q_3 + 1)/2))\n            print(sum_3)\n        if q_5 \u003e0:\n            sum_5 = int(5*q_5*((q_5 + 1)/2))\n            print(sum_5)\n        if q_15 \u003e0:\n            sum_15 = int(15*q_15*((q_15 + 1)/2))\n            print(sum_15)\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        print(q_3)\n        q_5 = (n-1)//5\n        print(q_5)\n        q_15 = (n-1)//15\n        print(q_15)\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = int(3*q_3*((q_3 + 1)/2))\n            print(sum_3)\n        if q_5 \u003e0:\n            sum_5 = int(5*q_5*((q_5 + 1)/2))\n            print(sum_5)\n        if q_15 \u003e0:\n            sum_15 = int(15*q_15*((q_15 + 1)/2))\n            print(sum_15)\n        sum = sum_3+sum_5-sum_15\n    print(int(sum))\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = int(3*q_3*((q_3 + 1)/2))\n        if q_5 \u003e0:\n            sum_5 = int(5*q_5*((q_5 + 1)/2))\n        if q_15 \u003e0:\n            sum_15 = int(15*q_15*((q_15 + 1)/2))\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = int(round(3*q_3*((q_3 + 1)/2),2))\n        if q_5 \u003e0:\n            sum_5 = int(round(5*q_5*((q_5 + 1)/2),2))\n        if q_15 \u003e0:\n            sum_15 = int(round(15*q_15*((q_15 + 1)/2),2))\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        print(q_3)\n        q_5 = (n-1)//5\n        print(q_5)\n        q_15 = (n-1)//15\n        print(q_15)\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*(q_3*(q_3 + 1))//2\n            print(sum_3)\n        if q_5 \u003e0:\n            sum_5 = 5*(q_5*(q_5 + 1))//2\n            print(sum_5)\n        if q_15 \u003e0:\n            sum_15 = 15*(q_15*(q_15 + 1))//2\n            print(sum_15)\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*(q_3*(q_3 + 1))//2\n        if q_5 \u003e0:\n            sum_5 = 5*(q_5*(q_5 + 1))//2\n        if q_15 \u003e0:\n            sum_15 = 15*(q_15*(q_15 + 1))//2\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    sum_3=0\n    sum_5=0\n    sum_15=0\n    if q_3 \u003e0:\n        sum_3 = 3*(q_3*(q_3 + 1))//2\n    if q_5 \u003e0:\n        sum_5 = 5*(q_5*(q_5 + 1))//2\n    if q_15 \u003e0:\n        sum_15 = 15*(q_15*(q_15 + 1))//2\n    sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\nimport sys\nt = int(input().strip())\nfor i in range(0,t):\n    n = int(input().strip())\n    #Check if the number is a multiple of 3 and append it to the lists of multiples of 3 and multiples of 5 respectively\n    if (n -1)\u003c3 :\n        sum = 0\n    elif (n-1) == 4:\n        sum=3\n    else:    \n        q_3 = (n-1)//3\n        q_5 = (n-1)//5\n        q_15 = (n-1)//15\n        sum_3=0\n        sum_5=0\n        sum_15=0\n        if q_3 \u003e0:\n            sum_3 = 3*(q_3*(q_3 + 1))//2\n        if q_5 \u003e0:\n            sum_5 = 5*(q_5*(q_5 + 1))//2\n        if q_15 \u003e0:\n            sum_15 = 15*(q_15*(q_15 + 1))//2\n        sum = sum_3+sum_5-sum_15\n    print(sum)\n    \n","score":1.0,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n  L =[]\n  L_ind = []\n  L_index =[]\n  L_res =[]\n  L_ind2 = []\n\n  for i,j in enumerate(freq_signals):\n    for k in range(0,len(freq_standard)):\n      L.append(abs(j-freq_standard[k]))\n    #print(\"*****\",L)\n\n    if L.count(min(L)) \u003e 1:\n      for m,n in enumerate(L):\n        if n == min(L): \n          L_ind.append(m)\n          for o,m in enumerate(L_ind):\n            L_ind2.append(freq_standard[m])\n      L_index.append(freq_standard.index(max(L_ind2)))\n    else:\n      L_index.append(L.index(min(L)))\n    #print(L_index)\n\n    L = [] # re-initialize L\n\n  for i,j in enumerate(L_index):\n    L_res.append(freq_standard.index(freq_standard[j])+1)\n  return (L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    freq_standard = list(map(int, input().rstrip().split()))\n\n    freq_signals = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(freq_standard, freq_signals)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n  L =[]\n  L_ind = []\n  L_index =[]\n  L_res =[]\n  L_ind2 = []\n\n  for i,j in enumerate(freq_signals):\n    for k in range(0,len(freq_standard)):\n      L.append(abs(j-freq_standard[k]))\n    #print(\"*****\",L)\n\n    if L.count(min(L)) \u003e 1:\n      for m,n in enumerate(L):\n        if n == min(L): \n          L_ind.append(m)\n          for o,m in enumerate(L_ind):\n            L_ind2.append(freq_standard[m])\n      L_index.append(freq_standard.index(max(L_ind2)))\n    else:\n      L_index.append(L.index(min(L)))\n    #print(L_index)\n\n    L = [] # re-initialize L\n\n  for i,j in enumerate(L_index):\n    L_res.append(freq_standard.index(freq_standard[j])+1)\n  return (L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    freq_standard = list(map(int, input().rstrip().split()))\n\n    freq_signals = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(freq_standard, freq_signals)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n  L =[]\n  L_ind = []\n  L_index =[]\n  L_res =[]\n  L_ind2 = []\n\n  for i,j in enumerate(F):\n    for k in range(0,len(f)):\n      L.append(abs(j-f[k]))\n    #print(\"*****\",L)\n\n    if L.count(min(L)) \u003e 1:\n      for m,n in enumerate(L):\n        if n == min(L): \n          L_ind.append(m)\n          for o,m in enumerate(L_ind):\n            L_ind2.append(f[m])\n      L_index.append(f.index(max(L_ind2)))\n    else:\n      L_index.append(L.index(min(L)))\n    #print(L_index)\n\n    L = [] # re-initialize L\n\n  for i,j in enumerate(L_index):\n    L_res.append(f.index(f[j])+1)\n  return L_res\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n  L =[]\n  L_ind = []\n  L_index =[]\n  L_res =[]\n  L_ind2 = []\n\n  for i,j in enumerate(freq_signals):\n    for k in range(0,len(freq_standard)):\n      L.append(abs(j-freq_standard[k]))\n    #print(\"*****\",L)\n\n    if L.count(min(L)) \u003e 1:\n      for m,n in enumerate(L):\n        if n == min(L): \n          L_ind.append(m)\n          for o,m in enumerate(L_ind):\n            L_ind2.append(freq_standard[m])\n      L_index.append(freq_standard.index(max(L_ind2)))\n    else:\n      L_index.append(L.index(min(L)))\n    #print(L_index)\n\n    L = [] # re-initialize L\n\n  for i,j in enumerate(L_index):\n    return (freq_standard.index(freq_standard[j])+1))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    freq_standard = list(map(int, input().rstrip().split()))\n\n    freq_signals = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(freq_standard, freq_signals )\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n  L =[]\n  L_ind = []\n  L_index =[]\n  L_res =[]\n  L_ind2 = []\n\n  for i,j in enumerate(freq_signals):\n    for k in range(0,len(freq_standard)):\n      L.append(abs(j-freq_standard[k]))\n    #print(\"*****\",L)\n\n    if L.count(min(L)) \u003e 1:\n      for m,n in enumerate(L):\n        if n == min(L): \n          L_ind.append(m)\n          for o,m in enumerate(L_ind):\n            L_ind2.append(freq_standard[m])\n      L_index.append(freq_standard.index(max(L_ind2)))\n    else:\n      L_index.append(L.index(min(L)))\n    #print(L_index)\n\n    L = [] # re-initialize L\n\n  for i,j in enumerate(L_index):\n    L_res.append(freq_standard.index(freq_standard[j])+1)\n  return (L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    freq_standard = list(map(int, input().rstrip().split()))\n\n    freq_signals = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(freq_standard, freq_signals)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n    L =[]\n    L_ind = []\n    L_index =[]\n    L_res =[]\n    L_ind2 = []\n\n    for i,j in enumerate(freq_signals):\n      for k in range(0,len(freq_standard)):\n        L.append(abs(j-freq_standard[k]))\n      #print(\"*****\",L)\n\n      if L.count(min(L)) \u003e 1:\n        for m,n in enumerate(L):\n          if n == min(L): \n            L_ind.append(m)\n            for o,m in enumerate(L_ind):\n              L_ind2.append(freq_standard[m])\n        L_index.append(freq_standard.index(max(L_ind2)))\n      else:\n        L_index.append(L.index(min(L)))\n      #print(L_index)\n\n      L = [] # re-initialize L\n\n    for i,j in enumerate(L_index):\n      L_res.append(freq_standard.index(freq_standard[j])+1)\n    return(L_res)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n    L =[]\n    L_ind = []\n    L_index =[]\n    L_res =[]\n    L_ind2 = []\n\n    for i,j in enumerate(freq_signals):\n      for k in range(0,len(freq_standard)):\n        L.append(abs(j-freq_standard[k]))\n      #print(\"*****\",L)\n\n      if L.count(min(L)) \u003e 1:\n        for m,n in enumerate(L):\n          if n == min(L): \n            L_ind.append(m)\n            for o,m in enumerate(L_ind):\n              L_ind2.append(freq_standard[m])\n        L_index.append(freq_standard.index(max(L_ind2)))\n      else:\n        L_index.append(L.index(min(L)))\n      #print(L_index)\n\n      L = [] # re-initialize L\n\n    for i,j in enumerate(L_index):\n      L_res.append(freq_standard.index(freq_standard[j])+1)\n    return(L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n    L =[]\n    L_ind = []\n    L_index =[]\n    L_res =[]\n    L_ind2 = []\n\n    for i,j in enumerate(freq_signals):\n      for k in range(0,len(freq_standard)):\n        L.append(abs(j-freq_standard[k]))\n      #print(\"*****\",L)\n\n      if L.count(min(L)) \u003e 1:\n        for m,n in enumerate(L):\n          if n == min(L): \n            L_ind.append(m)\n            for o,m in enumerate(L_ind):\n              L_ind2.append(freq_standard[m])\n        L_index.append(freq_standard.index(max(L_ind2)))\n      else:\n        L_index.append(L.index(min(L)))\n      #print(L_index)\n\n      L = [] # re-initialize L\n\n    for i,j in enumerate(L_index):\n      L_res.append(freq_standard.index(freq_standard[j])+1)\n    return(L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"Women Technologists Codesprint","challenge":"Signal Classification","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'classifySignals' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY freq_standard\n#  2. INTEGER_ARRAY freq_signals\n#\n\ndef classifySignals(freq_standard, freq_signals):\n    # Write your code here\n    L =[]\n    L_ind = []\n    L_index =[]\n    L_res =[]\n    L_ind2 = []\n\n    for i,j in enumerate(freq_signals):\n      for k in range(0,len(freq_standard)):\n        L.append(abs(j-freq_standard[k]))\n      #print(\"*****\",L)\n\n      if L.count(min(L)) \u003e 1:\n        for m,n in enumerate(L):\n          if n == min(L): \n            L_ind.append(m)\n            for o,m in enumerate(L_ind):\n              L_ind2.append(freq_standard[m])\n        L_index.append(freq_standard.index(max(L_ind2)))\n      else:\n        L_index.append(L.index(min(L)))\n      #print(L_index)\n\n      L = [] # re-initialize L\n\n    for i,j in enumerate(L_index):\n      L_res.append(freq_standard.index(freq_standard[j])+1)\n    return(L_res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    f = list(map(int, input().rstrip().split()))\n\n    F = list(map(int, input().rstrip().split()))\n\n    ans = classifySignals(f, F)\n\n    fptr.write('\\n'.join(map(str, ans)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.461538,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nZero =[\"0\",\"00\",\"000\"]\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1[0:3]== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n        res1= res1+\" \"+\"Billion\"+\" \"\n\n  if n2[0:3]== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n        res2= res2+\" \"+\"Million\"+\" \"\n\n  if n3[0:3]== \"000\":\n    res3= \"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n        res3 = res3+\" \"+\"Thousand\"+\" \"\n\n  if n4[0:3]== \"000\":\n    res4= \"\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[4] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nZero =[\"0\",\"00\",\"000\"]\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1[0:3]== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1= res1+\" \"+\"Billion\"+\" \"\n\n  if n2[0:3]== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2= res2+\" \"+\"Million\"+\" \"\n\n  if n3[0:3]== \"000\":\n    res3= \"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n\n  if n4[0:3]== \"000\":\n    res4= \"\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.4,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nZero =[\"0\",\"00\",\"000\"]\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1[0:3]== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2[0:3]== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3[0:3]== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4[0:3]== \"000\":\n    res4= \"\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\"   \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nZero =[\"0\",\"00\",\"000\"]\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1[0:3]== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2[0:3]== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3[0:3]== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4[0:3]== \"000\":\n    res4= \"\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nZero =[\"0\",\"00\",\"000\"]\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1[0:3]== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2[0:3]== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3[0:3]== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4[0:3]== \"000\":\n    res4= \"\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4 == \"000\":\n    print(\"Zero\")\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4 == \"000\":\n    print(\"Zero\")\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4 == \"000\":\n    print(\"Zero\")\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #17: Number to Words","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nones = {\"1\":'One',\"2\":'Two',\"3\":'Three',\"4\":'Four',\"5\":'Five',\"6\":'Six',\"7\":'Seven',\"8\":'Eight',\"9\":'Nine'}\ntens ={\"10\":'Ten',\"11\":'Eleven',\"12\":'Twelve',\"13\": 'Thirteen',\"14\":'Fourteen',\"15\":'Fifteen',\"16\":'Sixteen',\"17\":'Seventeen',\"18\":'Eighteen',\"19\":'Nineteen'}\nhundreds = {\"2\":'Twenty', \"3\":'Thirty',\"4\": 'Forty', \"5\":'Fifty', \"6\":'Sixty', \"7\":'Seventy', \"8\":'Eighty',\"9\": 'Ninety'}\nthousands=['Hundred']\nres = \"\"\n\nT= int(input(\"\"))\nfor i in range(0,T):\n  N = int(input(\"\"))\n  N = str(N)\n  while len(N)!= 12:\n    N= \"0\"+N\n  #print(\"**********\",N)\n  n1= N[0:3]\n  #print(n1)\n  n2= N[3:6]\n  #print(n2)\n  n3= N[6:9]\n  #print(n3)\n  n4 = N[-3:]\n  #print(n4)\n\n  res1=\"\"\n  res2=\"\"\n  res3=\"\"\n  res4=\"\"\n\n  if n1== \"000\":\n    res1= \"\"\n  else:\n    if n1[0] in ones:\n      res1 = ones[n1[0]]+\" \"+\"Hundred\"\n    if n1[1] in hundreds:\n        res1 = res1+ \" \"+ hundreds[n1[1]]\n    if n1[1:3] in tens:\n      res1 = res1+ \" \"+ tens[n1[1:3]]\n    else:\n      if n1[2] in ones:\n        res1 = res1+ \" \"+ ones[n1[2]]\n    res1 = res1.strip(\" \")\n    res1= res1+\" \"+\"Billion\"+\" \"\n    \n\n  if n2== \"000\":\n    res2= \"\"\n  else:\n    if n2[0] in ones:\n      res2 = ones[n2[0]]+\" \"+\"Hundred\"\n    if n2[1] in hundreds:\n        res2 = res2+ \" \"+ hundreds[n2[1]]\n    if n2[1:3] in tens:\n      res2 = res1+ \" \"+ tens[n2[1:3]]\n    else:\n      if n2[2] in ones:\n        res2 = res2+ \" \"+ ones[n2[2]]\n    res2 = res2.strip(\" \")\n    res2= res2+\" \"+\"Million\"+\" \"\n   \n\n  if n3== \"000\":\n    res3=\"\"\n  else:\n    if n3[0] in ones:\n      res3 = ones[n3[0]]+\" \"+\"Hundred\"\n    if n3[1] in hundreds:\n        res3 = res3+ \" \"+ hundreds[n3[1]]\n    if n3[1:3] in tens:\n      res3 = res3+ \" \"+ tens[n3[1:3]]\n    else:\n      if n3[2] in ones:\n        res3 = res3+ \" \"+ ones[n3[2]]\n    res3 = res3.strip(\" \")\n    res3 = res3+\" \"+\"Thousand\"+\" \"\n    \n\n  if n4 == \"000\":\n    res4 = \"Zero\"\n  else:\n    if n4[0] in ones:\n      res4 = ones[n4[0]]+\" \"+\"Hundred\"\n    if n4[1] in hundreds:\n        res4 = res4+ \" \"+ hundreds[n4[1]]\n    if n4[1:3] in tens:\n      res4 = res4+ \" \"+ tens[n4[1:3]]\n    else:\n      if n4[2] in ones:\n        res4 = res4 = res4+ \" \"+ ones[n4[2]]\n    res4 = res4.strip(\" \") \n    #print(res4)\n\n    res5= (res1+res2+res3+res4).strip(\" \")\n    print(res5)\n    \n","score":0.8,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = int(3*((N*(N+1))/2))\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = int(5*((N1*(N1+1))/2))\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      Sum_35 = Sum_35 + mult_35[i] \n      #print(Sum_35)\n\n    sum = Sum_3+Sum_5- Sum_35\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = int(3*((N*(N+1))/2))\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = int(5*((N1*(N1+1))/2))\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      N2= len(mult_35)\n      X= mult_35[0]\n      Sum_35 = int(X*((N2*(N2+1))/2))\n      #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    if n \u003c 3 :\n        sum = 0\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = int(3*((N*(N+1))/2))\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = int(5*((N1*(N1+1))/2))\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      N2= len(mult_35)\n      X= mult_35[0]\n      Sum_35 = int(X*((N2*(N2+1))/2))\n      #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    if n \u003c 3 :\n        sum = 0\n    if n == 4:\n        sum = 3\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = int(3*((N*(N+1))/2))\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = int(5*((N1*(N1+1))/2))\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      N2= len(mult_35)\n      X= mult_35[0]\n      Sum_35 = int(X*((N2*(N2+1))/2))\n      #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = int(3*((N*(N+1))/2))\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = int(5*((N1*(N1+1))/2))\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      N2= len(mult_35)\n      X= mult_35[0]\n      Sum_35 = int(X*((N2*(N2+1))/2))\n      #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    for i in range(0,len(mult_3)):\n      N= len(mult_3)\n      Sum_3 = 3*((N*(N+1))//2)\n      #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    for i in range(0,len(mult_5)):\n      N1= len(mult_5)\n      Sum_5 = 5*((N1*(N1+1))//2)\n      #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    for i in range(0,len(mult_35)):\n      N2= len(mult_35)\n      X= mult_35[0]\n      Sum_35 = X*((N2*(N2+1))//2)\n      #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    L=[]\n    for i in range (1,n):\n      L.append(i)\n    #print(L)\n\n    # Sum of Multiples of 3 \n    mult_3 = []\n    for i in L:\n      if i%3 == 0:\n        mult_3.append(i)\n    #print(mult_3)\n\n    #Sum_3\n    Sum_3 = 0\n    N= len(mult_3)\n    Sum_3 = 3*((N*(N+1))//2)\n    #print(Sum_3)\n\n# Sum of Multiples of 5\n    mult_5 = []\n    for i in L:\n      if i%5== 0:\n      # and i not in mult_3....# Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.....cannot do it here as summation continuity is lost in n(n+1)/2 formula....: \n        mult_5.append(i)\n    #print(mult_5)\n\n    #Sum_5\n    Sum_5 = 0\n    N1= len(mult_5)\n    Sum_5 = 5*((N1*(N1+1))//2)\n    #print(Sum_5)\n\n\n    # Count those numbers which are a multiple of both 3 and 5 only once, in any one of the lists.\n\n    # Sum of Multiples of both 3 and 5\n    mult_35 = []\n    for i in L:\n      if i%3 == 0 and i%5 ==0 :\n        mult_35.append(i)\n    #print(mult_35)\n\n    #Sum_3\n    Sum_35 = 0\n    N2= len(mult_35)\n\n    Sum_35 = 15*((N2*(N2+1))//2)\n    #print(Sum_35)\n\n    sum = Sum_3 + Sum_5- Sum_35\n    print(sum)\n      \n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    q_3 = (n-1)//3\n    q_5 = (n-1)//5\n    q_15 = (n-1)//15\n    sum_3=0\n    sum_5=0\n    sum_15=0\n    if q_3 \u003e0:\n        sum_3 = 3*(q_3*(q_3 + 1))//2\n    if q_5 \u003e0:\n        sum_5 = 5*(q_5*(q_5 + 1))//2\n    if q_15 \u003e0:\n        sum_15 = 15*(q_15*(q_15 + 1))//2\n    sum = sum_3+sum_5-sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n  n = int(input().strip())\n  mult_3 = (n-1)//3\n  mult_5 = (n-1)//5\n  mult_35 = (n-1)//15\n  sum = (3*(((mult_3)*(mult_3+1))//2)) + (5*(((mult_5)*(mult_5+1))//2)) - (15*(((mult_35)*(mult_35+1))//2))\n  print(sum)\n\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n  n = int(input().strip())\n  mult_3 = (n-1)//3\n  mult_5 = (n-1)//5\n  mult_35 = (n-1)//15\n  sum = (3*(((mult_3)*(mult_3+1))//2)) + (5*(((mult_5)*(mult_5+1))//2)) - (15*(((mult_35)*(mult_35+1))//2))\n  print(sum)\n\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\nt = int(input().strip())\nfor a0 in range(t):\n  n = int(input().strip())\n  mult_3 = (n-1)//3\n  mult_5 = (n-1)//5\n  mult_35 = (n-1)//15\n  sum = (3*(((mult_3)*(mult_3+1))//2)) + (5*(((mult_5)*(mult_5+1))//2)) - (15*(((mult_35)*(mult_35+1))//2))\n  print(sum)\n\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #2: Even Fibonacci numbers","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    fib= []\n    fib1= []\n    a0 = 1\n    a1 = 2\n    Sum = 0\n    fib.append(a0)\n    fib.append(a1)\n    fib1.append(a1)\n    while Sum \u003c n:\n        Sum = a0+a1\n        if Sum \u003c n:\n            fib.append(Sum)\n        if Sum%2 == 0 and Sum \u003c n:\n            fib1.append(Sum)\n        a0 = a1\n        a1= Sum\n    #print(fib)\n    print(sum(fib1))\n\n\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #2: Even Fibonacci numbers","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    fib= []\n    fib1= []\n    a0 = 1\n    a1 = 2\n    Sum = 0\n    fib.append(a0)\n    fib.append(a1)\n    fib1.append(a1)\n    while Sum \u003c n:\n        Sum = a0+a1\n        if Sum \u003c n:\n            fib.append(Sum)\n        if Sum%2 == 0 and Sum \u003c n:\n            fib1.append(Sum)\n        a0 = a1\n        a1= Sum\n    #print(fib)\n    print(sum(fib1))\n\n\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    N = n-1\n    mult_3 = N//3\n    mult_5 = N//5\n    LCM = 3*5\n    mult_LCM = N//LCM\n\n    Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n    Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n    Sum_15 = 15* ((mult_LCM * (mult_LCM+1)) / 2)\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    N = n-1\n    mult_3 = N//3\n    mult_5 = N//5\n    LCM = 3*5\n    mult_LCM = N//LCM\n    if n in (1,2):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n        print(Res)\n","score":0.4,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    N = n-1\n    mult_3 = N//3\n    mult_5 = N//5\n    LCM = 3*5\n    mult_LCM = N//LCM\n    if n ==1 or n == 2:\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n        print(Res)\n","score":0.4,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    N = n-1\n    mult_3 = N//3\n    mult_5 = N//5\n    LCM = 3*5\n    mult_LCM = N//LCM\n    if n ==1 or n == 2:\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    N = n-1\n    mult_3 = N//3\n    mult_5 = N//5\n    LCM = 3*5\n    mult_LCM = N//LCM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = N-1///3\n    mult_5 = N-1//5\n    LCM = 3*5\n    mult_LCM = N-1//LCM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = N-1//3\n    mult_5 = N-1//5\n    LCM = 3*5\n    mult_LCM = N-1//LCM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (N-1)//3\n    mult_5 = (N-1)//5\n    LCM = 3*5\n    mult_LCM = N-1//L  N = n-1  N = n-1CM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (N-1)//3\n    mult_5 = (N-1)//5\n    LCM = 3*5\n    mult_LCM = N-1//LCM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (N-1)//3\n    mult_5 = (N-1)//5\n    LCM = 3*5\n    mult_LCM = (N-1)//LCM\n    if n in (1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM\n    if n in (0,1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM\n    if n in (0,1,2,3):\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM\n    if n==1 or n==2 or n==3:\n        Res = 0\n    else:    \n        Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n        Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n        Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n        Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM  \n    Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n    Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n    Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_LCM = (n-1)//15 \n    Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n    Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n    Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_LCM = (n-1)//15 \n    Sum_3 = 3 * (((mult_3 * (mult_3+1)) / 2))\n    Sum_5 = 5 * (((mult_5 * (mult_5+1)) / 2))\n    Sum_15 = 15* (((mult_LCM * (mult_LCM+1))/2))\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_35 = (n-1)//15\n    sum = (3*(((mult_3)*(mult_3+1))//2)) + (5*(((mult_5)*(mult_5+1))//2)) - (15*(((mult_35)*(mult_35+1))//2))\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM  \n    Sum_3 = (3 * ((mult_3 * (mult_3+1))/2))\n    Sum_5 = (5 * ((mult_5 * (mult_5+1))/2))\n    Sum_15 = (15* ((mult_LCM * (mult_LCM+1))/2))\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print(Res)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM  \n    Sum_3 = (3 * ((mult_3 * (mult_3+1))/2))\n    Sum_5 = (5 * ((mult_5 * (mult_5+1))/2))\n    Sum_15 = (15* ((mult_LCM * (mult_LCM+1))/2))\n    Res = Sum_3 + Sum_5 - Sum_15\n    print(int(Res))\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_35 = (n-1)//15\n    sum = (3*((mult_3*(mult_3+1))//2)) + (5*((mult_5*(mult_5+1))//2)) - (15*((mult_35*(mult_35+1))//2))\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_35 = (n-1)//15\n    sum_3 = (3*((mult_3*(mult_3+1))//2))\n    sum_5 = (5*((mult_5*(mult_5+1))//2))\n    sum_15 = (15*((mult_35*(mult_35+1))//2))\n    sum =  sum_3 +sum_5 +sum_15\n    print(sum)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    mult_35 = (n-1)//15\n    sum_3 = (3*((mult_3*(mult_3+1))//2))\n    sum_5 = (5*((mult_5*(mult_5+1))//2))\n    sum_15 = (15*((mult_35*(mult_35+1))//2))\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = (3*((mult_3*(mult_3+1))//2))\n    sum_5 = (5*((mult_5*(mult_5+1))//2))\n    sum_15 = (15*((mult_35*(mult_35+1))//2))\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2)\n    sum_5 = 5*((mult_5*(mult_5+1))//2)\n    sum_15 = 15*((mult_35*(mult_35+1))//2)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\nimport math\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))/2)\n    sum_5 = 5*((mult_5*(mult_5+1))/2)\n    sum_15 = 15*((mult_35*(mult_35+1))/2)\n    sum =  math.floor(sum_3 +sum_5 - sum_15)\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))/2)\n    sum_5 = 5*((mult_5*(mult_5+1))/2)\n    sum_15 = 15*((mult_35*(mult_35+1))/2)\n    sum =  int(sum_3) + int(sum_5) - int(sum_15)\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*int((mult_3*(mult_3+1))/2)\n    sum_5 = 5*int((mult_5*(mult_5+1))/2)\n    sum_15 = 15*int((mult_35*(mult_35+1))/2)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = int(3*((mult_3*(mult_3+1))/2))\n    sum_5 = int(5*((mult_5*(mult_5+1))/2))\n    sum_15 = int(15*((mult_35*(mult_35+1))/2))\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*mult_3*(mult_3+1)/2\n    sum_5 = 5*mult_5*(mult_5+1)/2\n    sum_15 = 15*mult_35*(mult_35+1)/2\n    sum =  int(sum_3 +sum_5 - sum_15)\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = int(3*mult_3*(mult_3+1)/2)\n    sum_5 = int(5*mult_5*(mult_5+1)/2)\n    sum_15 = int(15*mult_35*(mult_35+1)/2)\n    sum =  int(sum_3 +sum_5 - sum_15)\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = int(3*mult_3*(mult_3+1)/2)\n    sum_5 = int(5*mult_5*(mult_5+1)/2)\n    sum_15 = int(15*mult_35*(mult_35+1)/2)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2)\n    sum_5 = 5*((mult_5*(mult_5+1))//2)\n    sum_15 = 15*((mult_35*(mult_35+1))//2)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python\n\nimport sys\n\n\nt = int(raw_input().strip())\nfor a0 in xrange(t):\n    n = int(raw_input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    LCM = 3*5\n    mult_LCM = (n-1)//LCM  \n    Sum_3 = 3 * ((mult_3 * (mult_3+1)) / 2)\n    Sum_5 = 5 * ((mult_5 * (mult_5+1)) / 2)\n    Sum_15 = 15* ((mult_LCM * (mult_LCM+1))/2)\n    Res = int(Sum_3 + Sum_5 - Sum_15)\n    print Res\n","score":1.0,"language":"python"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2.0)\n    sum_5 = 5*((mult_5*(mult_5+1))//2.0)\n    sum_15 = 15*((mult_35*(mult_35+1))//2.0)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":0.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2.0)\n    sum_5 = 5*((mult_5*(mult_5+1))//2.0)\n    sum_15 = 15*((mult_35*(mult_35+1))//2.0)\n    sum =  int(sum_3 +sum_5 - sum_15)\n    print(sum)\n","score":0.6,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2)\n    sum_5 = 5*((mult_5*(mult_5+1))//2)\n    sum_15 = 15*((mult_35*(mult_35+1))//2)\n    sum =  int(sum_3 +sum_5 - sum_15)\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #1: Multiples of 3 and 5","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    mult_3 = (n-1)//3\n    mult_5 = (n-1)//5\n    lcm = 3*5\n    mult_35 = (n-1)//lcm\n    sum_3 = 3*((mult_3*(mult_3+1))//2)\n    sum_5 = 5*((mult_5*(mult_5+1))//2)\n    sum_15 = 15*((mult_35*(mult_35+1))//2)\n    sum =  sum_3 +sum_5 - sum_15\n    print(sum)\n","score":1.0,"language":"python3"},{"contest":"ProjectEuler+","challenge":"Project Euler #2: Even Fibonacci numbers","code":"#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor a0 in range(t):\n  n = int(input().strip())\n  fib= []\n  fib1= []\n  a0 = 1\n  a1 = 2\n  Sum = 0\n  fib.append(a0)\n  fib.append(a1)\n  fib1.append(a1)\n  while Sum \u003c n:\n    Sum = a0+a1\n    if Sum \u003c n: # There was one last extra term coming. So added this.\n      fib.append(Sum)\n    if Sum%2 == 0 and Sum \u003c n: # There was one last extra term coming. So added this.\n      fib1.append(Sum)\n    a0 = a1\n    a1= Sum\n  #print(fib)\n  print(sum(fib1))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nn=int(input(\"\"))\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,5):\n      print(\"Not Weird\")\n    \n    elif n in range(6,20):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nn=int(input(\"\"))\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,5):\n      print(\"Not Weird\")\n    \n    elif n in range(6,20):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n    \n    else:\n     None\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nn=int(input(\"\"))\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,6):\n      print(\"Not Weird\")\n    \n    elif n in range(6,21):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n    \n    else:\n     None\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\n\nn=int(input(\"\"))\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,6):\n      print(\"Not Weird\")\n    \n    elif n in range(6,21):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n    \n    else:\n     None\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nn=int(input(\"\"))\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,6):\n      print(\"Not Weird\")\n    \n    elif n in range(6,21):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n    \n    else:\n     None\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"a=int(input(\"\"))\nb=int(input(\"\"))\nsumm= a+b\ndifference=abs(a-b)\nproduct=a*b\nprint(summ)\nprint(difference)\nprint(product)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python: Division","code":"a = int(input())\nb = int(input())\nprint(a//b)\nprint(a/b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 0: Hello, World.","code":"# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint('Hello, World.')\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n\nprint(input_string)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 1: Data Types","code":"\n# Declare second integer, double, and String variables.\n\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\ni1 = int(input(\"\"))\nd1= float(input(\"\"))\ns1= str(input(\"\"))\nprint(i+i1)\nprint(d+d1)\nprint(s+s1)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 1: Data Types","code":"\ni1 = int(input(\"\"))\nd1= float(input(\"\"))\ns1= str(input(\"\"))\nprint(i+i1)\nprint(d+d1)\nprint(s+s1)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 1: Data Types","code":"\ni1 = int(input(\"\"))\nd1= float(input(\"\"))\ns1= str(input(\"\"))\nprint(i+i1)\nprint(d+d1)\nprint(s+s1)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 0: Hello, World.","code":"# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint('Hello, World.')\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\nprint(input_string)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 2: Operators","code":"meal_cost=float(input())\ntip= int(input())/100\ntax= int(input())/100\ntotal_cost= meal_cost + (tip*meal_cost) +(tax*meal_cost)\nprint(int(total_cost))\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Day 2: Operators","code":"meal_cost=float(input(\"\"))\ntip= int(input(\"\"))/100\ntax= int(input(\"\"))/100\ntotal_cost= meal_cost + (tip*meal_cost) +(tax*meal_cost)\nprint(int(round(total_cost,0)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 3: Intro to Conditional Statements","code":"n=int(input(\"\"))\n\nif n %2 != 0:\n  print(\"Weird\")\n\nelse:\n  if n%2 ==0:\n    if n in range(2,6):   # while using range , use (x,y+1).Here 5                          becomes 6 as range excludes the 2nd value \n      print(\"Not Weird\")\n    \n    elif n in range(6,21):\n      print(\"Weird\")\n  \n    elif n\u003e20 :\n      print(\"Not Weird\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 5: Loops","code":"n= int(input(\"\"))\nfor i in range(1,11):\n multiple=n*i\n print(n ,\"x\",i,\"=\",multiple)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 6: Let's Review","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nT=int(input(\"\"))\nfor i in range(0,T):\n    S=str(input(\"\"))\n    string1=\"\"\n    string2=\"\"\n    for k,l in enumerate(S):\n        if k%2==0:\n            string1= string1+S[k]\n        else:\n            string2= string2+S[k]\n    print(string1+\" \"+string2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sales by Match","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    unique=[]\n    pairs=0\n    extras=0\n# To find out uniue elements of a list\n    for i,j in enumerate(ar):\n        if j not in unique:\n            unique.append(ar[i])\n    #print(unique)\n    for i,j in enumerate(unique):\n        counter= ar.count(unique[i])\n        #print(\"The count of\",unique[i],\"is:\",counter)\n        if counter%2 == 0:\n            pairs = pairs+counter//2\n        else:\n            pairs= pairs+counter//2\n            extras= extras+1\n    return pairs\n    #print(extras)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 7: Arrays","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\nprint(*arr[::-1])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 7: Arrays","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n#My code line added\nprint(*arr[::-1])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 7: Arrays","code":"#!/bin/python3\n\n\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n#My code line added\nprint(*arr[::-1])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 7: Arrays","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n#My code line added\nprint(*arr[::-1])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 6: Let's Review","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nT=int(input(\"\"))\nfor i in range(0,T):\n    S=str(input(\"\"))\n    string1=\"\"\n    string2=\"\"\n    for k,l in enumerate(S):\n        if k%2==0:\n            string1= string1+S[k]\n        else:\n            string2= string2+S[k]\n    print(string1+\" \"+string2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 6: Let's Review","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nT=int(input(\"\"))\nfor i in range(0,T):\n    S=str(input(\"\"))\n    string1=\"\"\n    string2=\"\"\n    for k,l in enumerate(S):\n        if k%2==0:\n            string1= string1+S[k]\n        else:\n            string2= string2+S[k]\n    print(string1+\" \"+string2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # Note : len(e1) = len(e2)\n    if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n        count= len(s11)-len(e1)\n    else:\n        count= len(s22)-len(e1)\n    #print(count)\n\n    res= len(s1)+len(s2)+count\n    return res\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.078571428571,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # check if unique is 1\n    if len(e1)==1 and len(e2)==1:\n        count= abs(len(s11)-len(s22))\n    else:\n    # Note : len(e1) = len(e2)\n        if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n            count= len(s11)-len(e1)\n        else:\n            count= len(s22)-len(e1)\n        #print(count)\n\n    res= len(s1)+len(s2)+count\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # check if unique is 1\n    if len(e1)==1 and len(e2)==1:\n        count= abs(len(s11)-len(s22))\n    else:\n    # Note : len(e1) = len(e2)\n        if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n            count= len(s11)-len(e1)-1\n        else:\n            count= len(s22)-len(e1)-1\n        #print(count)\n\n    res= len(s1)+len(s2)+count\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.221428571429,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # check if unique is 1\n    if len(e1)==1 and len(e2)==1:\n        count= abs(len(s11)-len(s22))\n    else:\n    # Note : len(e1) = len(e2)\n        if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n            count= len(s11)-len(e1)-1\n        else:\n            count= len(s22)-len(e1)\n        #print(count)\n\n    res= len(s1)+len(s2)+count\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # check if unique is 1\n    if len(e1)==1 and len(e2)==1:\n        count= abs(len(s11)-len(s22))\n    else:\n    # Note : len(e1) = len(e2)\n        if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n            count= len(s11)-len(e1)\n        else:\n            count= len(s22)-len(e1)-1\n        #print(count)\n\n    res= len(s1)+len(s2)+count\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.221428571429,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    #print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    #print(s22)\n    #For characters-unique in original string a       \n    for i in range(0,len(s11)):\n        if s11[i] not in e1:\n            e1=e1+s11[i]\n    #print(e1)\n    #For characters-unique in original string b    \n    for i in range(0,len(s22)):\n        if s22[i] not in e2:\n            e2=e2+s22[i]\n    #print(e2)\n    # check if unique is 1\n    if len(e1)==1 and len(e2)==1:\n        count= abs(len(s11)-len(s22))\n    else:\n    # Note : len(e1) = len(e2)\n        if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n            count= len(s11)-len(e1)\n        else:\n            count= len(s22)-len(e1)\n        #print(count)\n\n    res= len(s1)+len(s2)+count\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    print(s22)\n    if len(s11)!=len(s22):\n        #For characters-unique in original string a       \n        for i in range(0,len(s11)):\n            if s11[i] not in e1:\n                e1=e1+s11[i]\n        #print(e1)\n        #For characters-unique in original string b    \n        for i in range(0,len(s22)):\n            if s22[i] not in e2:\n                e2=e2+s22[i]\n        #print(e2)\n        #####################correct from here\n        # check if unique is 1\n        if len(e1)==1 and len(e2)==1:\n            count= abs(len(s11)-len(s22))\n        else:\n        # Note : len(e1) = len(e2)\n            if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n                count= len(s11)-len(e1)\n            else:\n                count= len(s22)-len(e1)\n            #print(count)\n\n        res= len(s1)+len(s2)+count\n    else:\n        res= len(s1)+len(s2)\n    return (res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    print(s22)\n    if len(s11)!=len(s22):\n        #For characters-unique in original string a       \n        for i in range(0,len(s11)):\n            if s11[i] not in e1:\n                e1=e1+s11[i]\n        #print(e1)\n        #For characters-unique in original string b    \n        for i in range(0,len(s22)):\n            if s22[i] not in e2:\n                e2=e2+s22[i]\n        #print(e2)\n        #####################correct from here\n        # check if unique is 1\n        if len(e1)==1 and len(e2)==1:\n            count= abs(len(s11)-len(s22))\n        else:\n        # Note : len(e1) = len(e2)\n            if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n                count= len(s11)-len(e1)\n            else:\n                count= len(s22)-len(e1)\n            #print(count)\n        res= len(s1)+len(s2)+count\n    else:\n        res= len(s1)+len(s2)\n    return (res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"The Hurdle Race","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hurdleRace function below.\ndef hurdleRace(k, height):\n    result = max(height)- k\n    if result \u003c 0 :\n        return 0\n    else:\n        return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    height = list(map(int, input().rstrip().split()))\n\n    result = hurdleRace(k, height)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  #import numpy as np\n  cuta = \"\"\n  cutb =\"\"\n  for i in a:\n    if i not in b:\n      cuta = cuta + i\n  for i in b:\n    if i not in a:\n      cutb = cutb + i\n\n\n\n  # Check if the strings are of equal lengths\n\n  # for equal length strings\n\n  res2= 0\n  res1 = len(cuta)+len(cutb)\n\n# update the strings after cuts\n  for i in a:\n    if i in cuta:\n      a= a.replace(i,'')\n      a=''.join(sorted(a))\n  for i in b:\n    if i in cutb:\n      b= b.replace(i,'')\n      b=''.join(sorted(b))\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(a):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(b):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  print(a,b,dicta,dictb,lista,listb,listc)\n  count= 0\n  for i in listc:\n    res2= res2 + i\n\n  return (res1+res2)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.378571428571,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  #import numpy as np\n  cuta = \"\"\n  cutb =\"\"\n  for i in a:\n    if i not in b:\n      cuta = cuta + i\n  for i in b:\n    if i not in a:\n      cutb = cutb + i\n\n\n\n  # Check if the strings are of equal lengths\n\n  # for equal length strings\n\n  res2= 0\n  res1 = len(cuta)+len(cutb)\n\n# update the strings after cuts\n  for i in a:\n    if i in cuta:\n      a= a.replace(i,'')\n      a=''.join(sorted(a))\n  for i in b:\n    if i in cutb:\n      b= b.replace(i,'')\n      b=''.join(sorted(b))\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(a):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(b):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  print(a,b,dicta,dictb,lista,listb,listc)\n  count= 0\n  for i in listc:\n    res2= res2 + i\n\n  return (res1+res2)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.378571428571,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  #import numpy as np\n  cuta =\"\"\n  cutb =\"\"\n  for i in a:\n    if i not in b:\n      cuta = cuta + i\n  for i in b:\n    if i not in a:\n      cutb = cutb + i\n\n  res1 = len(cuta) + len(cutb)\n  res2=0\n  \n# update the strings after cuts\n  for i in a:\n    if i in cuta:\n      a= a.replace(i,'')\n      a=''.join(sorted(a))\n    else:\n      a=''.join(sorted(a))\n  for i in b:\n    if i in cutb:\n      b= b.replace(i,'')\n      b=''.join(sorted(b))\n    else:\n      b=''.join(sorted(b))\n\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(a):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(b):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n\n  count= 0\n  for i in listc:\n    res2= res2 + i\n\n  return (res1+res2)\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  #import numpy as np\n  cuta =\"\"\n  cutb =\"\"\n  for i in a:\n    if i not in b:\n      cuta = cuta + i\n  for i in b:\n    if i not in a:\n      cutb = cutb + i\n\n  res1 = len(cuta) + len(cutb)\n  res2=0\n  \n# update the strings after cuts\n  for i in a:\n    if i in cuta:\n      a= a.replace(i,'')\n      a=''.join(sorted(a))\n    else:\n      a=''.join(sorted(a))\n  for i in b:\n    if i in cutb:\n      b= b.replace(i,'')\n      b=''.join(sorted(b))\n    else:\n      b=''.join(sorted(b))\n\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(a):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(b):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n\n  count= 0\n  for i in listc:\n    res2= res2 + i\n\n  return (res1+res2)\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  #import numpy as np\n  cuta =\"\"\n  cutb =\"\"\n  for i in a:\n    if i not in b:\n      cuta = cuta + i\n  for i in b:\n    if i not in a:\n      cutb = cutb + i\n\n  res1 = len(cuta) + len(cutb)\n  res2=0\n  \n# update the strings after cuts\n  for i in a:\n    if i in cuta:\n      a= a.replace(i,'')\n      a=''.join(sorted(a))\n    else:\n      a=''.join(sorted(a))\n  for i in b:\n    if i in cutb:\n      b= b.replace(i,'')\n      b=''.join(sorted(b))\n    else:\n      b=''.join(sorted(b))\n\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(a):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(b):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n\n  count= 0\n  for i in listc:\n    res2= res2 + i\n\n  return (res1+res2)\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  res = 0  \n  import string\n  a=''.join(sorted(a))\n  b=''.join(sorted(b))\n  alpha = string.ascii_lowercase\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(alpha):\n    dicta[j] = a.count(j)\n\n  dictb = {}\n  for i,j in enumerate(alpha):\n    dictb[j] = b.count(j)\n\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n\n  ## if numpy is used\n  #lista = np.array(lista)\n  #listb = np.array(listb)\n  #listc= abs(lista-listb)\n\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n\n  count= 0\n  for i in listc:\n    res= res + i\n\n  return (res)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  res = 0  \n  import string\n  a=''.join(sorted(a))\n  b=''.join(sorted(b))\n  alpha = string.ascii_lowercase\n  #sort a and b strings in ascending order\n  dicta = {}\n  for i,j in enumerate(alpha):\n    dicta[j] = a.count(j)\n  dictb = {}\n  for i,j in enumerate(alpha):\n    dictb[j] = b.count(j)\n#return (dicta,dictb)\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  count= 0\n  for i in listc:\n    res= res + i\n  return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  res = 0  \n  import string\n  #arrange the alphabets in ascending order\n  a=''.join(sorted(a))\n  b=''.join(sorted(b))\n  # lower case alphabets \n  alpha = string.ascii_lowercase\n  #make a dictionary with the count of corresponding alphabets from the lowercase       alphabets in string a and string b\n  dicta = {}\n  for i,j in enumerate(alpha):\n    dicta[j] = a.count(j)\n  dictb = {}\n  for i,j in enumerate(alpha):\n    dictb[j] = b.count(j)\n#return (dicta,dictb)\n#make a list of values of keys from lista and listb corres. to string a and string b\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  count= 0\n  for i in listc:\n    res= res + i\n  return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    s1=\"\"\n    s2=\"\"\n    s11=\"\"\n    s22=\"\"\n    count=0\n    e1=\"\"\n    e2=\"\"\n    #For characters in a not in b\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            s1=s1+a[i]\n    #print(s1)\n    #For remaining characters in original string a\n    for i in range(0,len(a)):\n        if a[i] not in s1:\n            s11=s11+a[i]        \n    print(s11)\n    #For characters in b not in a\n    for i in range(0,len(b)):\n        if b[i] not in a:\n            s2=s2+b[i]\n    #print(s2)\n    #For remaining characters in original string b\n    for i in range(0,len(b)):\n        if b[i] not in s2:\n            s22=s22+b[i]\n    print(s22)\n    if len(s11)!=len(s22):\n        #For characters-unique in original string a       \n        for i in range(0,len(s11)):\n            if s11[i] not in e1:\n                e1=e1+s11[i]\n        #print(e1)\n        #For characters-unique in original string b    \n        for i in range(0,len(s22)):\n            if s22[i] not in e2:\n                e2=e2+s22[i]\n        #print(e2)\n        #####################correct from here\n        # check if unique is 1\n        if len(e1)==1 and len(e2)==1:\n            count= abs(len(s11)-len(s22))\n        else:\n        # Note : len(e1) = len(e2)\n            if len(s11)\u003e len(s22): # len(remaining chars) - len(unique chars)\n                count= len(s11)-len(e1)\n            else:\n                count= len(s22)-len(e1)\n            #print(count)\n        res= len(s1)+len(s2)+count\n    else:\n        res= len(s1)+len(s2)\n    return (res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":0.157142857143,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  res = 0  \n  import string\n  #arrange the alphabets in ascending order\n  a=''.join(sorted(a))\n  b=''.join(sorted(b))\n  # lower case alphabets \n  alpha = string.ascii_lowercase\n  #make a dictionary with the count of corresponding alphabets from the lowercase       alphabets in string a and string b\n  dicta = {}\n  for i,j in enumerate(alpha):\n    dicta[j] = a.count(j)\n  dictb = {}\n  for i,j in enumerate(alpha):\n    dictb[j] = b.count(j)\n#return (dicta,dictb)\n#make a list of values of keys from lista and listb corres. to string a and string b\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  count= 0\n  for i in listc:\n    res= res + i\n  return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n  res = 0  \n  import string\n  # lower case alphabets \n  alpha = string.ascii_lowercase\n  #make a dictionary with the count of corresponding alphabets from the lowercase       alphabets in string a and string b\n  dicta = {}\n  for i,j in enumerate(alpha):\n    dicta[j] = a.count(j)\n  dictb = {}\n  for i,j in enumerate(alpha):\n    dictb[j] = b.count(j)\n#return (dicta,dictb)\n#make a list of values of keys from lista and listb corres. to string a and string b\n  lista=[]\n  for key,value in dicta.items():\n    lista.append(value)\n  listb=[]\n  for key,value in dictb.items():\n    listb.append(value)\n# subtract corresponding elements of 2 lists\n  listc = [abs(a - b) for a, b in zip(lista, listb)]\n  count= 0\n  for i in listc:\n    res= res + i\n  return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 8: Dictionaries and Maps","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input(\"\"))\nlist1 =[]\nfor i in range (0,n):\n  name = list(map(str,input(\"\").split()))\n  list1.extend(name)\n#print(list1)\nphonebook={}\nfor i,j in enumerate(list1):\n  if i%2 ==0 :\n    phonebook[j] = int(list1[i+1])\n#print(phonebook)\n#from sys import stdin ( q range given )\nfor queries in range (0,1000000):\n  q = input(\"\")\n  if q not in phonebook.keys():\n    print('Not found')\n  else:\n    key = phonebook[q]\n    print(q + \"=\" + str(key))\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Day 8: Dictionaries and Maps","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input(\"\"))\nlist1 =[]\nfor i in range (0,n):\n  name1 = list(map(str,input(\"\").split()))\n  list1.extend(name1)\n#print(list1)\nphonebook={}\nfor i,j in enumerate(list1):\n  if i%2 ==0 :\n    phonebook[j] = int(list1[i+1])\n#print(phonebook)\n# read input till it is given , with Exception handling\nwhile True: # while(1):\n  try:\n      name = input()\n      if name in phonebook:\n        print(name+\"=\"+str(phonebook[name]))\n      else:\n        print('Not found')\n  except:\n      break\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 8: Dictionaries and Maps","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input(\"\"))\nlist1 =[]\nfor i in range (0,n):\n  name1 = list(map(str,input(\"\").split()))\n  list1.extend(name1)\nphonebook={}\nfor i,j in enumerate(list1):\n  if i%2 ==0 :\n    phonebook[j] = int(list1[i+1])\n# read input till it is given , with Exception handling\nwhile True: # while(1):\n  try:\n      name = input()\n      if name in phonebook:\n        print(name+\"=\"+str(phonebook[name]))\n      else:\n        print('Not found')\n  except:\n      break\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 8: Dictionaries and Maps","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input(\"\"))\nlist1 =[]\nfor i in range (0,n):\n  name1 = list(map(str,input(\"\").split()))\n  list1.extend(name1)\nphonebook={}\nfor i,j in enumerate(list1):\n  if i%2 ==0 :\n    phonebook[j] = int(list1[i+1])\n# read input till it is given , with Exception handling\nwhile True: # while(1):\n  try:\n      name = input()\n      if name in phonebook:\n        print(name+\"=\"+str(phonebook[name]))\n      else:\n        print('Not found')\n  except:\n      break\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 3: Intro to Conditional Statements","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    N = int(input())\n    if N%2 ==1:\n        print(\"Weird\")\n    else:\n        if (N in range(0,6,2)) or (N \u003e 20):\n            print(\"Not Weird\")\n        else:\n            print(\"Weird\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 5: Loops","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(1,11):\n        print(n,\"x\",i,\"=\",(n*i))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 6: Let's Review","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nT = int(input(\"\"))\nfor i in range(0,T):\n  S = str(input())\n  S1=\"\"\n  S2 =\"\"\n  for j in range(0,len(S)):\n    if j%2 == 0:\n      S1 = S1+S[j]\n    else:\n      S2 = S2+S[j]\n  print(S1+\" \"+S2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 7: Arrays","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n    arr.reverse()\n    print(*arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 8: Dictionaries and Maps","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\nPhonebook ={}\nfor i in range(0,n):\n  entry = list(map(str,input().split()))\n  Phonebook[entry[0]]= entry[1]\nwhile True:\n  try:\n    query = str(input())\n    if query in Phonebook:\n      print(query+\"=\"+Phonebook[query])\n    else:\n      print(\"Not found\")\n  except:\n    break\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 9: Recursion 3  ","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the factorial function below.\ndef factorial(n):\n    if n == 1:\n        return n\n    else:\n        return (n*factorial(n-1))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    result = factorial(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 9: Recursion 3  ","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the factorial function below.\ndef factorial(n):\n    if n == 1:\n        return n\n    else:\n        return (n*factorial(n-1))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    result = factorial(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b= b[2:]\n    count =0\n    res=0\n    if b.count(\"1\")==0:\n        print(0)\n    elif b.count(\"1\")== len(b):\n        print(len(b))\n    else:\n        res = b.split(\"0\")\n        res = len(max(res, key= len))\n    print(res)\n","score":0.857142857143,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b= b[2:]\n    count =0\n    res=0\n    if b.count(\"1\")==0:\n        res = 0\n    elif b.count(\"1\")== len(b):\n        res = len(b)\n    else:\n        res = b.split(\"0\")\n        res = len(max(res, key= len))\n    print(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    import string\n    L_a =[]\n    L_b =[]\n\n    alpha = string.ascii_lowercase\n\n    for i in alpha:\n        L_a.append(a.count(i))\n        L_b.append(b.count(i))\n\n    res = [ abs(a-b) for a,b in zip(L_a,L_b)]\n    return(sum(res))\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    import string\n    L_a =[]\n    L_b =[]\n\n    alpha = string.ascii_lowercase\n\n    for i in alpha:\n        L_a.append(a.count(i))\n        L_b.append(b.count(i))\n\n    res = [ abs(a-b) for a,b in zip(L_a,L_b)]\n    return(sum(res))\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    import string\n    L_a =[]\n    L_b =[]\n\n    alpha = string.ascii_lowercase\n\n    for i in alpha:\n        L_a.append(a.count(i))\n        L_b.append(b.count(i))\n\n    res = [ abs(a-b) for a,b in zip(L_a,L_b)]\n    return(sum(res))\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strings: Making Anagrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the makeAnagram function below.\ndef makeAnagram(a, b):\n    import string\n    L_a =[]\n    L_b =[]\n\n    alpha = string.ascii_lowercase\n\n    for i in alpha:\n        L_a.append(a.count(i))\n        L_b.append(b.count(i))\n\n    res = [ abs(a-b) for a,b in zip(L_a,L_b)]\n    return(sum(res))\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = input()\n\n    b = input()\n\n    res = makeAnagram(a, b)\n\n    fptr.write(str(res) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sales by Match","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    Dict ={}\n    for i in ar:\n        Dict[i]= ar.count(i)\n    pairs = 0\n    for key,value in Dict.items():\n        if value % 2 == 0:\n            pairs = pairs+ value//2\n        else:\n            value = value-1\n            pairs = pairs+value//2\n    return pairs\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    res=\"\"\n    while len(res)\u003c n:\n        for i in range(0,len(s)):\n            res= res + s[i]\n            res = res[0:n]\n    return(res.count(\"a\"))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.292452830189,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    res=\"\"\n    if s == \"a\":\n        res1 = n\n    else: \n        while len(res)\u003c n:\n            for i in range(0,len(s)):\n                res= res + s[i]\n                res = res[0:n]\n                res1 = res.count(\"a\")\n    return (res1)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.056603773585,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    res=\"\"\n    if s == \"a\":\n        res1 = n\n    else: \n        while len(res)\u003c n:\n            for i in range(0,len(s)):\n                res= s*n\n                res = res[0:n]\n                res1 = res.count(\"a\")\n    return(res1)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.292452830189,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    count_a_quotient = 0\n    count_a_rem = 0\n    count = s.count(\"a\")\n    if s == \"a\":\n        res = n\n    else: \n        count_a_quotient = count*((n//len(s)))\n        rem_len = n-(len(s)* (n//len(s)))\n        res = s[0:rem_len].count(\"a\")\n        res = res + count_a_quotient\n    return(res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    count_a_quotient = 0\n    count = s.count(\"a\")\n    if s == \"a\":\n        res = n\n    else: \n        count_a_quotient = count*((n//len(s)))\n        rem_len = n-(len(s)* (n//len(s)))\n        res = s[0:rem_len].count(\"a\")\n        res = res + count_a_quotient\n    return(res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    base2 = bin(n)[2:]\n    #print(base2)\n    L = []\n    if n == \"0\":\n        print(0)\n    elif n == \"1\":\n        print(1)\n    else:\n        base2 = base2.split(\"0\")\n    for i,j in enumerate(base2):\n        L.append(len(j))\nprint(max(L))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b = b[2:]\n    L= [0]\n    #print(b)\n    b = b.split(\"0\")\n    #print(b)\n    print(len(max(b , key =len)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b = b[2:]\n    L= [0]\n    #print(b)\n    b = b.split(\"0\")\n    #print(b)\n    print(len(max(b,key =len)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b = b[2:]\n    L= []\n    #print(b)\n    count = 0\n    L =[]\n    for i in range(0,len(b)):\n        if b[i]== \"1\":\n            count+=1\n            temp = count\n    else:\n        L.append(count)\n        count = 0\n#print(L)\nif b[-1] != \"0\" :\n  L.append(temp)\n#print(L)\nL1 = []\nfor i in L:\n  if i != 0:\n    L1.append(i)\nprint(max(L1))\n","score":0.142857142857,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b = b[2:]\n    L= []\n    #print(b)\n    count = 0\n    L =[]\n    for i in range(0,len(b)):\n        if b[i]== \"1\":\n            count+=1\n            temp = count\n        else:\n            L.append(count)\n            count = 0\n#print(L)\nif b[-1] != \"0\" :\n  L.append(temp)\n#print(L)\nL1 = []\nfor i in L:\n  if i != 0:\n    L1.append(i)\nprint(max(L1))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day 10: Binary Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    b = bin(n)\n    b = b[2:]\n    L= [0]\n    #print(b)\n    b = b.split(\"0\")\n    #print(b)\n    print(len(max(b , key =len)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Select All","code":"SELECT * FROM CITY;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising the Select Query I","code":"SELECT * FROM CITY WHERE POPULATION \u003e 100000 AND COUNTRYCODE ='USA';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select By ID","code":"SELECT * FROM CITY WHERE ID = '1661';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select By ID","code":"SELECT * FROM CITY WHERE ID = 1661;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select By ID","code":"SELECT * FROM CITY WHERE ID = 1661;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising the Select Query II","code":"SELECT NAME FROM CITY WHERE POPULATION \u003e 120000 AND COUNTRYCODE ='USA';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising the Select Query II","code":"SELECT NAME FROM CITY WHERE POPULATION \u003e 120000 AND COUNTRYCODE ='USA';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Attributes","code":"SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 1","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\nSELECT CITY,STATE FROM STATION ;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 3","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)= 0;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    #print(magazine,note)\n    D_Mag = {}\n    D_Note = {}\n\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = magazine.count(note[i])\n\n    #print(D_Mag)\n    #print(D_Note)\n\n    Yes_count = 0\n    for key,value in D_Note.items():\n        if key in D_Mag and value == D_Mag[key]:\n            Yes_count+=1\n    if Yes_count == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.421052631579,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    #print(magazine,note)\n    D_Mag = {}\n    D_Note = {}\n\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = note.count(note[i])\n\n    #print(D_Mag)\n    #print(D_Note)\n\n    Yes_count = 0\n    for key,value in D_Note.items():\n        if key in D_Mag and value == D_Mag[key]:\n            Yes_count+=1\n    if Yes_count == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.315789473684,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    #print(magazine,note)\n    D_Mag = {}\n    D_Note = {}\n\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = note.count(note[i])\n\n    #print(D_Mag)\n    #print(D_Note)\n\n    Yes_count = 0\n    for key,value in D_Note.items():\n        if key in D_Mag and value \u003c= D_Mag[key]:\n            Yes_count+=1\n    if Yes_count == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.421052631579,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    #print(magazine,note)\n    D_Mag = {}\n    D_Note = {}\n\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = note.count(note[i])\n\n    #print(D_Mag)\n    #print(D_Note)\n\n    a = Counter(D_Mag)\n    b = Counter(D_Note)\n    if a\u0026b == b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.421052631579,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    a = Counter(D_Mag)\n    b = Counter(D_Note)\n    if a\u0026b == b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    a = Counter(magazine)\n    b = Counter(note)\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    a = Counter(magazine)\n    b = Counter(note)\n    if a\u0026b == b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    mag = Counter(magazine)\n    note = Counter(note)\n    if mag \u0026 note == note:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    D_mag ={}\n    D_note = {}\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = note.count(note[i])\n\n    mag =  Counter(D_mag)\n    notes = Counter(D_note )\n\n    if mag \u0026 notes == notes :\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Hash Tables: Ransom Note","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\n# Complete the checkMagazine function below.\ndef checkMagazine(magazine, note):\n    D_Mag ={}\n    D_Note = {}\n    for i in range(0,len(magazine)):\n        D_Mag[magazine[i]] = magazine.count(magazine[i])\n\n    for i in range(0,len(note)):\n        D_Note[note[i]] = note.count(note[i])\n\n    mag =  Counter(D_Mag)\n    notes = Counter(D_Note )\n\n    if mag \u0026 notes == notes :\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    magazine = input().rstrip().split()\n\n    note = input().rstrip().split()\n\n    checkMagazine(magazine, note)\n","score":0.421052631579,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    L = list(path)\n    #print(L)\n    counter = 0\n    res = []\n    for i in range(0,len(L)):\n        if L[i] == \"U\":\n            counter += 1\n        else:\n            counter -= 1\n        res.append(counter)\n    #print(res)\n    if L[0]!= \"U\" and L[steps-1] != \"D\":\n        return(res.count(0))\n    else:\n        return(res.count(0)-1)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.35,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    L = list(path)\n    #print(L)\n    counter = 0\n    L1 = []\n    for i in range(0,len(L)):\n        counter1 = 0\n        if L[i] == \"U\":\n            counter += 1\n        else:\n            counter -= 1\n        L1.append(counter)\n    #print(L1)\n    ind = []\n    for i in range(0,len(L1)):\n        if L1[i]==0:\n            ind.append(i)\n    #print(ind)\n        \n    valley = 0\n    for i in range(0,len(ind)):\n        if L1[ind[i]-1] \u003c 0:\n            valley +=1\n\n    return(valley)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    #No. of whole repeatations\n    quotient = n//len(s)\n    # Extra part (part of tapered repeatation)\n    rem = 10 % len(s)\n    #print(quotient )\n    #print(rem)\n    extra = s[0:rem].count(\"a\")\n    res = s.count(\"a\")*quotient  + extra\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.377358490566,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    #No. of whole repeatations\n    quotient = n//len(s)\n    # Extra part (part of tapered repeatation)\n    rem = 10 % len(s)\n    #print(quotient)\n    #print(rem)\n    if n \u003c len(s):\n        res = s[0:n+1].count(\"a\")\n    else:\n        extra = s[0:rem].count(\"a\")\n        res = s.count(\"a\")*quotient + extra\n    return(res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.433962264151,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    #No. of whole repeatations\n    quotient = n//len(s)\n    # Extra part (part of tapered repeatation)\n    rem = n % len(s)\n    #print(quotient)\n    #print(rem)\n    if n \u003c len(s):\n        res = s[0:n+1].count(\"a\")\n    else:\n        extra = s[0:rem].count(\"a\")\n        res = s.count(\"a\")*quotient + extra\n    return(res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Solve Me First","code":"\n\ndef solveMeFirst(a,b):\n\t# Hint: Type return a+b below\n    return (a+b)\n\n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Simple Array Sum","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the simpleArraySum function below.\n#\ndef simpleArraySum(ar):\n    #\n    # Write your code here.\n    sum1 = 0\n    for i in range(0,len(ar)):\n        sum1 = sum1+ ar[i]\n    return (sum1)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = simpleArraySum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n    L = list(a1-b1 for a1,b1 in zip(a,b))\n    #print(L)\n\n    L1 = []\n    for i in range(0,len(L)):\n        if L[i] \u003c 0:\n            L1.append(\"b\")\n        elif L[i] \u003e 0:\n            L1.append(\"a\")\n    res= []\n    res.append(L1.count(\"a\"))\n    res.append(L1.count(\"b\"))\n    return (res)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"A Very Big Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the aVeryBigSum function below.\ndef aVeryBigSum(ar):\n    sum1=0\n    for i in range(0,len(ar)):\n        sum1 = sum1 + ar[i]\n    return (sum1)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = aVeryBigSum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Plus Minus","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the plusMinus function below.\ndef plusMinus(arr):\n    neg = 0\n    pos = 0\n    zero = 0\n    for i in range(0,len(arr)):\n        if ar[i] \u003e 0:\n            pos += 1\n        elif ar[i] \u003c 0:\n            neg += 1\n        else:\n            zero += 1\n    return (pos/len(arr))\n    return (neg/len(arr))\n    return (zero/len(arr))\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    plusMinus(arr)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Plus Minus","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the plusMinus function below.\ndef plusMinus(arr):\n    neg = 0\n    pos = 0\n    zero = 0\n    for i in range(0,len(arr)):\n        if arr[i] \u003e 0:\n            pos += 1\n        elif arr[i] \u003c 0:\n            neg += 1\n        else:\n            zero += 1\n    print (pos/len(arr))\n    print (neg/len(arr))\n    print (zero/len(arr))\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    plusMinus(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #Conversion\n    if s[8] == \"A\":\n        if s[0:2] == \"12\":\n            res = \"00\"+s[2:8]\n        else:\n            res = s[0:8]\n    if s[8] == \"P\":\n        if s[0:2] == \"12\":\n            res = \"12\"+s[2:8]\n        else:\n            res = str(int(s[0:2])+12)+s[2:8]\n    return (res)\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Staircase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the staircase function below.\ndef staircase(n):\n    for i in range(1,n+1):\n        print(\" \"*(n-1)+ i*\"#\")\n        n=n-1\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    staircase(n)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mini-Max Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n    sort = sorted(arr)\n    maximum = 0\n    minimum = 0\n    for i in range(0,len(arr)-1):\n        maximum = maximum + arr[i]\n    for i in range(1,len(arr)):\n        minimum = manimum + arr[i]\n    print (max,min)\n\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Mini-Max Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n    sort = sorted(arr)\n    maximum = 0\n    minimum = 0\n    for i in range(0,len(sort)-1):\n        minimum = minimum + sort[i]\n    for i in range(1,len(sort)):\n        maximum = maximum + sort[i]\n    print (minimum,maximum)\n\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'birthdayCakeCandles' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY candles as parameter.\n#\n\ndef birthdayCakeCandles(candles):\n    # Write your code here\n    return (candles.count(max(candles)))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    candles_count = int(input().strip())\n\n    candles = list(map(int, input().rstrip().split()))\n\n    result = birthdayCakeCandles(candles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    s = \"\"\n    for i in range(1,n+1):\n        s = s+str(i)\n    print(s)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for i in range (0,n):\n        print(i*i)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0 :\n            if year%400 == 0 :\n                return not leap\n            return leap\n    return leap\n \n\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n    else:\n        return not leap\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = True\n    \n    # Write your logic here\n    '''if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n    else:\n        return not leap'''\n    \n    return (year%4==0) and (year%100!=0 or year%400==0)\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"itertools.product()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport itertools\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nprint(*list(itertools.product(A,B)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"itertools.permutations()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom itertools import permutations\nS = list(map(str,input().split()))\ns = S[0]\nn = int(S[1])\nL= sorted(list(permutations(s,n)))\nfor i in L:\n  print(i[0]+i[1])\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"itertools.permutations()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom itertools import permutations\nS = list(map(str,input().split()))\ns = S[0]\nn = int(S[1])\nL= sorted(list(permutations(s,n)))\nfor i in L:\n  res = \"\"\n  for j in range(0,len(i)):\n    res = res + i[j]\n  print(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"itertools.combinations()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom itertools import combinations\nS = list(map(str,input().split()))\ns = sorted(S[0])\nn = int(S[1])\nfor k in range(1,n+1):\n    L= list(combinations(s,k))\n    for i in L:\n        res = \"\"\n        for j in range(0,len(i)):\n            res = res + i[j]\n        print(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Recursion: Fibonacci Numbers","code":"def fibonacci(n):\n\n    # Write your code here.\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nn = int(input())\nprint(fibonacci(n))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Recursion: Fibonacci Numbers","code":"def fibonacci(n):\n\n    # Write your code here.\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nn = int(input())\nprint(fibonacci(n))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Recursion: Fibonacci Numbers","code":"def fibonacci(n):\n\n    # Write your code here.\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nn = int(input())\nprint(fibonacci(n))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compress the String! ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nS = str(input())\ntemp = 0 \ncount = 0\nnum= []\nind=[]\nind.append(-1)\nfor i in range(0,len(S)-1):\n  if S[i]!=S[i+1]:\n    num.append(S[i])\n    ind.append(i)\nnum.append(S[-1])\nind.append(len(S)-1)\nind1=[]\nfor i in range(0,len(ind)-1):\n  ind1.append(ind[i+1]-ind[i])\nres = [(a,int(b))for a,b in zip(ind1,num)]\nprint(*res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Integers Come In All Sizes","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nprint(a**b+c**d)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Power - Mod Power","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\na = int(input())\nb = int(input())\nm = int(input())\nprint(pow(a,b))\nprint(pow(a,b,m))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mod Divmod","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\na = int(input())\nb = int(input())\nprint(a//b)\nprint(a%b)\nprint(divmod(a,b))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Let's Echo","code":"echo \"HELLO\"\n","score":1.0,"language":"bash"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the longestCommonSubsequence function below.\ndef longestCommonSubsequence(a, b):\n    # Generate binary nos\n    bin1 = 2**len(a)\n    bin2 = 2**len(b)\n    #print(bin1,bin2)\n\n    # Subsequences for the first string a\n    res = \"\"\n    L=[]\n    for i in range(0,bin1):\n        res = bin(i)[2::]\n        #print(res)\n        while len(res) \u003c len(a):\n            res = \"0\" + res\n        #print(res)\n            \n        res1 = \"\"\n        for j in range(0,len(res)):\n            if res[j] == \"1\":\n                res1 = res1 + a[j]\n        L.append(res1)\n        #print(L)\n\n    # Subsequences for the first string b\n    res2 = \"\"\n    L1=[]\n    for k in range(0,bin2):\n        res2 = bin(k)[2::]\n        #print(res2)\n        while len(res2) \u003c len(b):\n            res2 = \"0\" + res2\n        #print(res2)\n\n\n        res3 = \"\"\n        for l in range(0,len(res2)):\n            if res2[l] == \"1\":\n                res3 = res3 + b[l]\n        L1.append(res3)\n        #print(L1)\n\n    L2 = []\n    for i in L:\n        if i in L1:\n            L2.append(i)\n    #print(sorted(L2,key=len))\n    return(*max(L2,key=len))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = longestCommonSubsequence(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the longestCommonSubsequence function below.\ndef longestCommonSubsequence(a, b):\n    # Generate binary nos\n    bin1 = 2**len(a)\n    bin2 = 2**len(b)\n    #print(bin1,bin2)\n\n    # Subsequences for the first string a\n    res = \"\"\n    L=[]\n    for i in range(0,bin1):\n        res = bin(i)[2::]\n        #print(res)\n        while len(res) \u003c len(a):\n            res = \"0\" + res\n        #print(res)\n            \n        res1 = \"\"\n        for j in range(0,len(res)):\n            if res[j] == \"1\":\n                res1 = res1 + a[j]\n        L.append(res1)\n        #print(L)\n\n    # Subsequences for the first string b\n    res2 = \"\"\n    L1=[]\n    for k in range(0,bin2):\n        res2 = bin(k)[2::]\n        #print(res2)\n        while len(res2) \u003c len(b):\n            res2 = \"0\" + res2\n        #print(res2)\n\n\n        res3 = \"\"\n        for l in range(0,len(res2)):\n            if res2[l] == \"1\":\n                res3 = res3 + b[l]\n        L1.append(res3)\n        #print(L1)\n\n    L2 = []\n    for i in L:\n        if i in L1:\n            L2.append(i)\n    #print(sorted(L2,key=len))\n    return(max(L2,key=len))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = longestCommonSubsequence(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the longestCommonSubsequence function below.\ndef longestCommonSubsequence(a, b):\n    a = str(a)\n    b = str(b)\n    # Generate binary nos\n    bin1 = 2**len(a)\n    bin2 = 2**len(b)\n    #print(bin1,bin2)\n\n    # Subsequences for the first string a\n    res = \"\"\n    L=[]\n    for i in range(0,bin1):\n        res = bin(i)[2::]\n        #print(res)\n        while len(res) \u003c len(a):\n            res = \"0\" + res\n        #print(res)\n            \n        res1 = \"\"\n        for j in range(0,len(res)):\n            if res[j] == \"1\":\n                res1 = res1 + a[j]\n        L.append(res1)\n        #print(L)\n\n    # Subsequences for the first string b\n    res2 = \"\"\n    L1=[]\n    for k in range(0,bin2):\n        res2 = bin(k)[2::]\n        #print(res2)\n        while len(res2) \u003c len(b):\n            res2 = \"0\" + res2\n        #print(res2)\n\n\n        res3 = \"\"\n        for l in range(0,len(res2)):\n            if res2[l] == \"1\":\n                res3 = res3 + b[l]\n        L1.append(res3)\n        #print(L1)\n\n    L2 = []\n    for i in L:\n        if i in L1:\n            L2.append(i)\n    #print(sorted(L2,key=len))\n    return(max(L2,key=len))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = longestCommonSubsequence(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the longestCommonSubsequence function below.\ndef longestCommonSubsequence(a, b):\n\n    # Generate binary nos\n    bin1 = 2**len(a)\n    bin2 = 2**len(b)\n    #print(bin1,bin2)\n\n    # Subsequences for the first string a\n    res = \"\"\n    L=[]\n    for i in range(0,bin1):\n        res = bin(i)[2::]\n        #print(res)\n        while len(res) \u003c len(a):\n            res = \"0\" + str(res)\n        #print(res)\n            \n        res1 = \"\"\n        for j in range(0,len(res)):\n            if res[j] == \"1\":\n                res1 = res1 + str(a[j])\n        L.append(res1)\n        #print(L)\n\n    # Subsequences for the first string b\n    res2 = \"\"\n    L1=[]\n    for k in range(0,bin2):\n        res2 = bin(k)[2::]\n        #print(res2)\n        while len(res2) \u003c len(b):\n            res2 = \"0\" + str(res2)\n        #print(res2)\n\n\n        res3 = \"\"\n        for l in range(0,len(res2)):\n            if res2[l] == \"1\":\n                res3 = res3 + str(b[l])\n        L1.append(res3)\n        #print(L1)\n\n    L2 = []\n    for i in L:\n        if i in L1:\n            L2.append(i)\n    #print(sorted(L2,key=len))\n    return(max(L2,key=len))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n    print(a)\n    \n\n    b = list(map(int, input().rstrip().split()))\n\n    result = longestCommonSubsequence(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    s1 = \"\"\n    l = string.ascii_lowercase\n    for i in l:\n        if s.count(i)%2 != 0 :\n            s1 = s1+i\n    \n    if len(s1) == 0:\n        return(\"Empty String\")\n    else:\n        return(s1)\n  \n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.615384615385,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    L = [0]\n    for i in range(0,len(s)-1):\n        if s[i+1]!=s[i]:\n            L.append(i+1)\n    L.append(len(s))\n    #print(L)\n\n    res= \"\"\n    for i in range(0,len(L)-1):\n        r = (s[L[i]:L[i+1]])\n        if len(r)%2 != 0:\n            res = res+s[L[i]]\n    if len(res)==0:\n        return(\"Empty String\")\n    else:\n        return(res)\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.615384615385,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    L = [0]\n    for i in range(0,len(s)-1):\n        if s[i+1]!=s[i]:\n            L.append(i+1)\n    L.append(len(s))\n    #print(L)\n\n    res= \"\"\n    for i in range(0,len(L)-1):\n        r = (s[L[i]:L[i+1]])\n        if len(r)%2 != 0:\n            res = res+s[L[i]]\n    if len(res)==0 or res[0]==res[1]:\n        return(\"Empty String\")\n    else:\n        return(res)\n\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.692307692308,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    # i = index \n    i = 0\n    while i \u003c len(s)-1:\n        if s[i]==s[i+1]:\n            s = s[:i]+s[i+2:]\n            i=0\n        else:\n            i += 1\n    if s:\n        return(s)\n    else:\n        return(\"Empty String\")\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    import string\n    if len(s) == 0:\n        print(0)\n    else:\n        count = 1\n        for i in range(0,len(s)):\n            if s[i] in string.ascii_uppercase:\n                count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    import string\n    count = 1\n    for i in range(0,len(s)):\n        if s[i] in string.ascii_uppercase:\n            count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    import string\n    count = 1\n    for i in string.ascii_uppercase:\n        if i in s:\n            count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.25,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    import string\n    l = string.ascii_uppercase\n    count = 1\n    for i in range(0,len(l)):\n        if l[i] in s:\n            count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.25,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    import string\n    count = 1\n    for i in range(0,len(s)):\n        if s[i] in string.ascii_uppercase:\n            count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    # i = index \n    i = 0\n    while i \u003c len(s)-1:\n        if s[i]==s[i+1]:\n            s = s[:i]+s[i+2:]\n            i=0\n        else:\n            i += 1\n    if s:\n        return(s)\n    else:\n        return(\"Empty String\")\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    # i = index \n    i = 0\n    # Reset i value and start the search again from the left of s to find equals. if           found, delete equals and reset i. else move forward. \n    while i \u003c len(s)-1:\n        if s[i]==s[i+1]:\n            s = s[:i]+s[i+2:]\n            i=0\n        else:\n            i += 1\n    if s:\n        return(s)\n    else:\n        return(\"Empty String\")\n  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"HackerRank in a String!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hackerrankInString function below.\ndef hackerrankInString(s):\n    word = \"hackerrank\"\n    count=0\n    for i in range(0,len(word)):\n        try:\n            a=(s.index(word[i]),s.rindex(word[i]))\n        except:\n            count+=1\n    if count \u003e=1:\n        return(\"NO\")\n    else:\n        return(\"YES\")\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        s = input()\n\n        result = hackerrankInString(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    import string\n    lower_case = string.ascii_lowercase\n    shift_lower_case = lower_case[k:] + lower_case[:k]\n    upper_case = string.ascii_uppercase\n    shift_upper_case = upper_case[k:] + upper_case[:k]\n\n    letters = lower_case + upper_case\n    shifted_letters = shift_lower_case + shift_upper_case\n\n    D = {}\n    for i,j in enumerate(letters):\n        D[j] = shifted_letters[i]\n    #print(D)\n\n    res=\"\"\n    for i,j in enumerate(s):\n        if j in string.ascii_letters:\n            res =  res + D[j]\n        else:\n            res = res + j\n\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.3,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    if len(s)% 2 == 0:\n        k = 26//k\n    else:\n        k = k//len(s)+2\n    import string\n    lower_case = string.ascii_lowercase\n    shift_lower_case = lower_case[k:] + lower_case[:k]\n    upper_case = string.ascii_uppercase\n    shift_upper_case = upper_case[k:] + upper_case[:k]\n\n    letters = lower_case + upper_case\n    shifted_letters = shift_lower_case + shift_upper_case\n\n    D = {}\n    for i,j in enumerate(letters):\n        D[j] = shifted_letters[i]\n    #print(D)\n\n    res=\"\"\n    for i,j in enumerate(s):\n        if j in string.ascii_letters:\n            res =  res + D[j]\n        else:\n            res = res + j\n\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    k = 26//k\n    import string\n    lower_case = string.ascii_lowercase\n    shift_lower_case = lower_case[k:] + lower_case[:k]\n    upper_case = string.ascii_uppercase\n    shift_upper_case = upper_case[k:] + upper_case[:k]\n\n    letters = lower_case + upper_case\n    shifted_letters = shift_lower_case + shift_upper_case\n\n    D = {}\n    for i,j in enumerate(letters):\n        D[j] = shifted_letters[i]\n    #print(D)\n\n    res=\"\"\n    for i,j in enumerate(s):\n        if j in string.ascii_letters:\n            res =  res + D[j]\n        else:\n            res = res + j\n\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    k = k % 26\n    import string\n    lower_case = string.ascii_lowercase\n    shift_lower_case = lower_case[k:] + lower_case[:k]\n    upper_case = string.ascii_uppercase\n    shift_upper_case = upper_case[k:] + upper_case[:k]\n\n    letters = lower_case + upper_case\n    shifted_letters = shift_lower_case + shift_upper_case\n\n    D = {}\n    for i,j in enumerate(letters):\n        D[j] = shifted_letters[i]\n    #print(D)\n\n    res=\"\"\n    for i,j in enumerate(s):\n        if j in string.ascii_letters:\n            res =  res + D[j]\n        else:\n            res = res + j\n\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    import string\n    k = k % 26 # Do not change value when k \u003c len(s) but once more, make k = k % 26 to                    get the remainder\n    letters = string.ascii_letters\n    shifted = letters[k:26]+letters[:k] + letters[26+k:] + letters[26:26+k]\n  \n    D = {}\n    for i,j in enumerate(letters):\n        D[j] = shifted[i]\n    #print(D)\n\n    res=\"\"\n    for i,j in enumerate(s):\n        if j in string.ascii_letters:\n            res =  res + D[j]\n        else:\n            res = res + j\n\n    return (res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    c = s[0:3]\n    L = []\n    for i in range(0,len(s),3):\n        if len(s[i:i+3]) ==3:\n            L.append(s[i:i+3])\n    #print(L)\n\n    count=0\n    for i in L:\n        for j,k in enumerate(i):\n            if k != s[j]:\n                count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.777777777778,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    c = \"SOS\"\n    L = []\n    for i in range(0,len(s),3):\n        if len(s[i:i+3]) ==3:\n            L.append(s[i:i+3])\n    #print(L)\n\n    count=0\n    for i in L:\n        for j,k in enumerate(i):\n            if k != s[j]:\n                count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.777777777778,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    c = \"SOS\"\n    L = []\n    for i in range(0,len(s),3):\n        if len(s[i:i+3]) ==3:\n            L.append(s[i:i+3])\n    #print(L)\n\n    count=0\n    for i in L:\n        for j,k in enumerate(i):\n            if k != c[j]:\n                count+=1\n    return(count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    m = len(s)//3\n\n    L1 = []\n    for m in range(0,m):\n        L1.append(\"SOS\")\n\n    L2 = []\n    for i in range(0,len(s),3):\n        if len(s[i:i+3]) ==3:\n            L2.append(s[i:i+3])\n    #print(L2)\n\n    l = sum(list(a != b for a,b in zip(L1,L2)))\n    return(l)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.222222222222,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'gradingStudents' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts INTEGER_ARRAY grades as parameter.\n#\n\ndef gradingStudents(grades):\n    # Write your code here\n    L = []\n    for i in range(0,len(grades)):\n        rnd = grades[i]\n        if grades[i] \u003c 38:\n            L.append(grades[i])\n        else:\n            while rnd % 5 != 0:\n                rnd = rnd + 1\n            if rnd - grades[i] \u003c 3:\n                L.append(rnd)\n            else:\n                L.append(grades[i])\n    return L\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    grades_count = int(input().strip())\n\n    grades = []\n\n    for _ in range(grades_count):\n        grades_item = int(input().strip())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"HackerRank in a String!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hackerrankInString function below.\ndef hackerrankInString(s):\n    seq = list(\"hackerrank\")\n    for i in s:\n        if i == seq[0]:\n            seq.pop(0)\n    if len(seq) == 0:\n        return (\"YES\")\n    else:\n        return (\"NO\")\n\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        s = input()\n\n        result = hackerrankInString(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HackerRank in a String!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hackerrankInString function below.\ndef hackerrankInString(s):\n    seq = list(\"hackerrank\")\n    flag = 0\n    for i in s:\n        if i == seq[0]:\n            seq.pop(0)\n            if len(seq) == 0:\n                flag = 1\n\n\n    if flag == 1:\n        return (\"YES\")\n    else:\n        return (\"NO\")\n\n\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        s = input()\n\n        result = hackerrankInString(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HackerRank in a String!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hackerrankInString function below.\ndef hackerrankInString(s):\n    seq = list(\"hackerrank\")\n    flag = 0\n    for i in s:\n        if i == seq[0]:\n            seq.pop(0)\n            if len(seq) == 0:\n                return (\"YES\")\n    return (\"NO\")\n\n\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        s = input()\n\n        result = hackerrankInString(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Diagonal Difference","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the 'diagonalDifference' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts 2D_INTEGER_ARRAY arr as parameter.\n#\n\ndef diagonalDifference(arr):\n    primary = sum([arr[i][i]for i in range(0,n)])\n    secondary =  sum([arr[i][n-i-1]for i in range(0,n)]) # Use iteration of i to subtract\n    return(abs(primary-secondary))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    result = diagonalDifference(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n\n    L1 = [i for i in range(0,x+1)]\n    #print(L1)\n    L2 = [i for i in range(0,y+1)]\n    #print(L2)\n    L3 = [i for i in range(0,z+1)]\n    #print(L3)\n\n    L =[]\n    for x in L1:\n        for y in L2:\n            for z in L3:\n                if x+y+z != n:\n                    L.append([x,y,z])\n    print(L)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    '''\n    # Normal\n    L1 = [i for i in range(0,x+1)]\n    #print(L1)\n    L2 = [i for i in range(0,y+1)]\n    #print(L2)\n    L3 = [i for i in range(0,z+1)]\n    #print(L3)\n\n    L =[]\n    for x in L1:\n        for y in L2:\n            for z in L3:\n                if x+y+z != n:\n                    L.append([x,y,z])\n    print(L)\n    '''\n    res = [[i,j,k] for i in range(0,x+1) for j in range(0,y+1) for k in range(0,z+1) if i+j+k != n ]\n    print(res)\n    #print(len(res))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    L = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        L.append([name,score])\n        L = sorted(L,key = lambda x:x[1] )\n#print(L)\n\nL1 = []\nfor i,j in enumerate(L):\n  L1.append(j[1])\n#print(min(L1))\nL2 = []\nfor i,j in enumerate(L):\n  if j[1] != min(L1):\n    L2.append(j)\n#print(L2)\n\nres = []\nfin = []\nfor k,v in L2:\n  res.append(v)\n  if v == min(res):\n    fin.append(k)\n\nfin.sort()\nfor i in fin:\n    print(i)\n\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        scores = sum(scores)/len(scores)\n        student_marks[name] = scores\n    query_name = input()\n    for k,v in student_marks.items():\n        if k == query_name:\n            print(\"%.2f\" % v)# Note.\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    if n%2 != 0:\n        print(\"Weird\")\n    else:\n        if n in range(2,6) or n\u003e20 :\n            print(\"Not Weird\")\n        else:\n            print(\"Weird\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    \n    #return (year%4==0) and (year%100!=0 or year%400==0)\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4==0) and year%100==0 or year%400==0\n        \n\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4==0) and year%100==0 and year%400==0\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return year%4==0 and year%100==0 and year%400==0\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return year%4==0 and (year%100==0 and year%400==0)\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return year%4==0 and (year%100==0 and year%400==0)\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%100==0 and year%400==0)\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4==0) and ((not(year%100==0 and year%400 == 0)) or (not year%100==0 and year%400 == 0) or (year%100==0 and year%400 == 0))\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4==0) and (((not(year%100==0 and year%400 == 0)) or (not year%100==0 and year%400 == 0) or (year%100==0 and year%400 == 0)))\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4 == 0) and (not(year%100 == 0 and year%400 == 0) or (year%100 == 0 and year%400 == 0))\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4 == 0) and (not(year%100 == 0 and year%400 == 0) or (year%100 == 0 and year%400 == 0) or (year%100 == 0 and not year%400 == 0))\n        \n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4 == 0) and (not year%100 == 0 and not year%400 == 0) or (not year%100 == 0 and year%400 == 0) or (year%100 == 0 and year%400 == 0))\n        \n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    return (year%4 == 0) and (not year%100 == 0 and not year%400 == 0) or (not year%100 == 0 and year%400 == 0) or (year%100 == 0 and year%400 == 0)\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    '''\n    leap = True\n    \n    # Write your logic here\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return leap\n            else:\n                return not leap\n        return leap\n\n    return not leap\n    '''\n    #return (year%4 == 0) and (not year%100 == 0 and not year%400 == 0) or (not year%100 == 0 and year%400 == 0) or (year%100 == 0 and year%400 == 0)\n    return (year%4 == 0) and (not year%100 == 0 or  (year%100 == 0 and year%400 == 0) )\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    s = \"\"\n    for i in range(1,n+1):\n        s = s + str(i)\n    print(s)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    s = \"\"\n    for i in range(1,n+1):\n        s = s + str(i)\n    print(s)\n # print(*[x for x in range(1,n+1)],sep=\"\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    from itertools import permutations\n    L = []\n    for i in range(0,x+1):\n        for j in range (0,y+1):\n            for k in range (0,z+1):\n                if i+j+k != n:\n                    L.append([i,j,k])\n    print(L)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n   \n    L = []\n    for i in range(0,x+1):\n        for j in range (0,y+1):\n            for k in range (0,z+1):\n                if i+j+k != n:\n                    L.append([i,j,k])\n    print(L)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n   \n    L = []\n    for i in range(0,x+1):\n        for j in range (0,y+1):\n            for k in range (0,z+1):\n                if i+j+k != n:\n                    L.append([i,j,k])\n    print(L)\n#print([[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c != n])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"L= []\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        L.append([name,score])\n        #print(L)\n    def getkey(x):\n        return x[1]\n    A = sorted(L,key = getkey)\n\n\n    L1= []\n    for i,j in A:\n        if j \u003c A[-1][1] and j \u003c A[-2][1]:\n            L1.append([i,j])\n    #print(L1)\n\nr = []\nfor i,j in L1:\n  if j == L1[-1][1]:\n    r.append(i)\nb= sorted(r)\n\nfor i in b:\n    print(i)\n","score":0.555555555556,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"L= []\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        L.append([name,score])\n        #print(L)\n    def getkey(x):\n        return x[1]\n    A = sorted(L,key = getkey, reverse = True)\n\n\n    L1= []\n    for i,j in A:\n        if j \u003e A[-1][1]:\n            L1.append([i,j])\n    #print(L1)\n\nr = []\nfor i,j in L1:\n  if j == L1[-1][1]:\n    r.append(i)\nb= sorted(r)\n\nfor i in b:\n    print(i)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compress the String! ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nS = str(input())\nfrom itertools import groupby\n\nfor i,j in groupby(S):\n  print((len(list(j)),int(i)),end = \" \")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count = 1 if path[0]==\"D\" else 0\n    #print(count)\n\n\n    summ = 0\n    count = 0 \n    for i,j in enumerate(path):\n        if j == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        if summ == 0:\n            count = count + 1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count = 1 if path[0]==\"D\" else 0\n    #print(count)\n\n\n    summ = 0\n    for i,j in enumerate(path):\n        if j == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        if summ == 0:\n            count = count + 1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.35,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count = 1 if path[0]==\"D\" else 0\n    #print(count)\n\n\n    summ = 0\n    for i,j in enumerate(path):\n        if j == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        if summ == 0 and j == \"D\":\n            count = count + 1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.05,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n\n\n    summ = 0\n\n    for i,j in enumerate(path):\n        if j == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ \u003c 0 and j == \"D\":\n            count = count + 1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.15,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ \u003c 0 and path[i+1] == \"D\":\n            count = count + 1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.25,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ \u003c 0 and path[i+1] == \"D\":\n            count = count + 1\n    if path[-1] == \"U\":\n        count = count+1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ \u003c 0 and path[i+1] == \"D\":\n            count = count + 1\n    count = count//2\n    if path[-1] == \"U\":\n        count = count+1\n    return (count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.15,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ \u003c 0 and path[i+1] == \"D\":\n            count = count + 1\n    if path[-1] == \"U\":\n        count = count+1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ == 0 and path[i+1] == \"D\":\n            count = count + 1\n    if path[-1] == \"U\":\n        count = count+1\n    return (count//2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.35,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ == 0 and path[i+1] == \"D\":\n            count = count + 1\n    return (count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countingValleys' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER steps\n#  2. STRING path\n#\n\ndef countingValleys(steps, path):\n    # Write your code here\n    count=1 if path[0]==\"D\" else 0\n    #print(flag)\n    summ = 0\n\n    for i in range(0,len(path)-1):\n        if path[i] == \"U\":\n            summ = summ + 1\n        else:\n            summ = summ - 1 \n        #print(\"*\",summ)\n        if summ == 0 and path[i+1] == \"D\": # if you reach the ground level (summ == 0)                                                  and also the next element is \"D\" meaning                                                you are entering a valley,then only update                                               the count\n            count = count + 1\n    return (count)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    steps = int(input().strip())\n\n    path = input()\n\n    result = countingValleys(steps, path)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays","code":"\n\ndef arrays(arr):\n    # complete this function\n    # use numpy.array\n    # use numpy.array\n    return numpy.array(arr,float)[::-1]\n    \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nprint(numpy.reshape(my_array,(3,3)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nprint(numpy.reshape(my_array,(3,3)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nmy_array.shape = (3,3)\nprint(my_array)\n","score":1.0,"language":"python3"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"},{"jobs_consent":null,"contest":"ProjectEuler+"},{"jobs_consent":null,"contest":"Booking.com All Women Hackathon"},{"jobs_consent":null,"contest":"HackerRank All Women's Codesprint 2019"},{"jobs_consent":true,"contest":"Women Technologists Codesprint"},{"jobs_consent":null,"contest":"hiring-challenge"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nprint(numpy.reshape(changed_shape))\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nprint(numpy.reshape(my_array))\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = input().split()\nmy_array = numpy.array(changed_shape)\nprint(numpy.reshape(my_array,(3,3)))\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nprint(numpy.reshape(my_array,(3,3)))\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nprint(numpy.shape(my_array,(3,3)))\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nnumpy.shape(3,3)\nprint(my_array)\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nmy_array.shape(3,3)\nprint(my_array)\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nmyarray.shape(3,3)\nprint(my_array)\n","language":"python3"},{"challenge":"Shape and Reshape","contest":"Master","code":"import numpy\n\nchanged_shape = list(map(int,input().split()))\nmy_array = numpy.array(changed_shape)\nmy_array.shape(3,3)\nprint(my_array)\n","language":"python3"}],"contests_created":[],"job_applications":[],"skills_test":[]}